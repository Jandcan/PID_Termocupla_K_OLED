
Termocupla_K_OLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00002f7a  0000300e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000410  00800170  00800170  0000307e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004550  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0e  00000000  00000000  00007924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000213c  00000000  00000000  00008832  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b38  00000000  00000000  0000a970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d55  00000000  00000000  0000b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005847  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00011a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__ctors_end>
       4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
       8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
       c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      10:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      14:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_5>
      18:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      1c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      20:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      24:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__vector_9>
      28:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      2c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      30:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      34:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      38:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      3c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      40:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      44:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      48:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      4c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      50:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      54:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      58:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      5c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      60:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      64:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__c.2618>:
     16a:	45 72 3a 20 25 64 20 20 20 00                       Er: %d   .

00000174 <__c.2616>:
     174:	25 2e 32 66 20 00                                   %.2f .

0000017a <__c.2614>:
     17a:	25 64 20 00                                         %d .

0000017e <__c.2607>:
     17e:	24 24 64 25 2e 32 66 23 64 25 2e 32 66 23 51 51     $$d%.2f#d%.2f#QQ
     18e:	0d 0a 00                                            ...

00000191 <__c.2597>:
     191:	54 6d 3a 20 30 00                                   Tm: 0.

00000197 <__c.2595>:
     197:	54 64 3a 20 30 00                                   Td: 0.

0000019d <__c.2591>:
     19d:	43 6f 72 74 6f 20 47 4e 44 0d 0a 00                 Corto GND...

000001a9 <__c.2589>:
     1a9:	43 6f 72 74 6f 20 56 43 43 0d 0a 00                 Corto VCC...

000001b5 <__c.2587>:
     1b5:	43 69 72 63 75 69 74 6f 20 41 62 69 65 72 74 6f     Circuito Abierto
     1c5:	0d 0a 00                                            ...

000001c8 <__c.2585>:
     1c8:	45 72 72 6f 72 2e 2e 2e 0d 0a 00                    Error......

000001d3 <__c.2554>:
     1d3:	49 6e 69 63 69 61 6e 64 6f 0d 0a 00                 Iniciando...

000001df <Tahoma13x14>:
     1df:	07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1f7:	00 00 00 03 00 00 fc 06 fc 06 00 00 00 00 00 00     ................
	...
     213:	00 00 05 1e 00 1e 00 00 00 1e 00 1e 00 00 00 00     ................
	...
     22f:	00 08 80 01 b0 07 f0 01 bc 01 b0 07 f0 01 bc 01     ................
     23f:	30 00 00 00 00 00 00 00 00 00 00 00 07 38 02 7c     0............8.|
     24f:	04 44 04 ff 1f 44 04 c4 07 88 03 00 00 00 00 00     .D...D..........
     25f:	00 00 00 00 00 00 00 0d 38 00 7c 00 44 00 44 02     ........8.|.D.D.
     26f:	7c 01 b8 00 40 00 a0 03 d0 07 48 04 40 04 c0 07     |...@.....H.@...
     27f:	80 03 0a 00 00 b8 03 fc 07 44 04 44 04 fc 04 b8     .........D.D....
     28f:	03 00 07 c0 05 c0 04 00 00 00 00 00 00 03 00 00     ................
     29f:	1e 00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2b7:	05 00 00 f0 07 fc 1f 0e 38 02 20 00 00 00 00 00     ........8. .....
	...
     2cf:	00 00 00 05 00 00 02 20 0e 38 fc 1f f0 07 00 00     ....... .8......
	...
     2eb:	00 00 07 00 00 14 00 08 00 3e 00 3e 00 08 00 14     .........>.>....
	...
     307:	00 09 00 00 00 00 40 00 40 00 40 00 f8 03 40 00     ......@.@.@...@.
     317:	40 00 40 00 00 00 00 00 00 00 00 00 03 00 18 00     @.@.............
     327:	1e 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     337:	00 00 00 00 00 00 00 05 40 00 40 00 40 00 40 00     ........@.@.@.@.
     347:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     357:	00 00 03 00 00 00 06 00 06 00 00 00 00 00 00 00     ................
	...
     373:	00 06 00 18 00 06 80 01 60 00 18 00 06 00 00 00     ........`.......
	...
     38f:	07 f8 03 fc 07 04 04 04 04 04 04 fc 07 f8 03 00     ................
	...
     3a7:	00 00 00 07 00 00 08 04 08 04 fc 07 fc 07 00 04     ................
     3b7:	00 04 00 00 00 00 00 00 00 00 00 00 00 00 07 18     ................
     3c7:	04 04 06 04 07 84 05 c4 04 7c 04 38 04 00 00 00     .........|.8....
	...
     3df:	00 07 08 02 04 04 44 04 44 04 44 04 fc 07 b8 03     ......D.D.D.....
	...
     3fb:	07 c0 00 a0 00 90 00 88 00 fc 07 fc 07 80 00 00     ................
	...
     413:	00 00 00 07 00 02 3c 04 3c 04 24 04 24 04 e4 07     ......<.<.$.$...
     423:	c4 03 00 00 00 00 00 00 00 00 00 00 00 00 07 f0     ................
     433:	03 f8 07 2c 04 24 04 24 04 e4 07 c0 03 00 00 00     ...,.$.$........
	...
     44b:	00 07 04 00 04 00 04 07 c4 07 f4 00 3c 00 0c 00     ............<...
	...
     467:	07 b8 03 fc 07 44 04 44 04 44 04 fc 07 b8 03 00     .....D.D.D......
	...
     47f:	00 00 00 07 78 00 fc 04 84 04 84 04 84 06 fc 03     ....x...........
     48f:	f8 01 00 00 00 00 00 00 00 00 00 00 00 00 03 00     ................
     49f:	00 30 06 30 06 00 00 00 00 00 00 00 00 00 00 00     .0.0............
	...
     4b7:	00 03 00 18 30 1e 30 06 00 00 00 00 00 00 00 00     ....0.0.........
	...
     4d3:	09 00 00 c0 00 c0 00 20 01 20 01 10 02 10 02 08     ....... . ......
     4e3:	04 08 04 00 00 00 00 00 00 00 00 09 00 00 90 00     ................
     4f3:	90 00 90 00 90 00 90 00 90 00 90 00 90 00 00 00     ................
     503:	00 00 00 00 00 00 09 00 00 08 04 08 04 10 02 10     ................
     513:	02 20 01 20 01 c0 00 c0 00 00 00 00 00 00 00 00     . . ............
     523:	00 06 08 00 04 00 c4 06 e4 06 3c 00 18 00 00 00     ..........<.....
	...
     53f:	09 f0 03 08 04 e4 09 f4 0b 14 0a f4 09 f4 0b 08     ................
     54f:	0a f0 01 00 00 00 00 00 00 00 00 09 00 06 c0 07     ................
     55f:	f0 01 bc 00 8c 00 bc 00 f0 01 c0 07 00 06 00 00     ................
     56f:	00 00 00 00 00 00 07 fc 07 fc 07 44 04 44 04 44     ...........D.D.D
     57f:	04 fc 07 b8 03 00 00 00 00 00 00 00 00 00 00 00     ................
     58f:	00 07 f8 03 fc 07 04 04 04 04 04 04 04 04 18 03     ................
	...
     5ab:	08 fc 07 fc 07 04 04 04 04 04 04 0c 06 f8 03 f0     ................
     5bb:	01 00 00 00 00 00 00 00 00 00 00 06 fc 07 fc 07     ................
     5cb:	44 04 44 04 44 04 04 04 00 00 00 00 00 00 00 00     D.D.D...........
     5db:	00 00 00 00 00 00 06 fc 07 fc 07 44 00 44 00 44     ...........D.D.D
     5eb:	00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5fb:	00 07 f8 03 fc 07 04 04 04 04 44 04 c4 07 d8 07     ..........D.....
	...
     617:	08 fc 07 fc 07 40 00 40 00 40 00 40 00 fc 07 fc     .....@.@.@.@....
     627:	07 00 00 00 00 00 00 00 00 00 00 04 04 04 fc 07     ................
     637:	fc 07 04 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
     647:	00 00 00 00 00 00 05 00 04 04 04 04 04 fc 07 fc     ................
     657:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     667:	00 07 fc 07 fc 07 e0 00 b0 01 18 03 0c 06 04 04     ................
	...
     683:	06 fc 07 fc 07 00 04 00 04 00 04 00 04 00 00 00     ................
	...
     69b:	00 00 00 0a fc 07 0c 00 3c 00 f0 00 c0 03 c0 00     ........<.......
     6ab:	30 00 0c 00 fc 07 fc 07 00 00 00 00 00 00 07 fc     0...............
     6bb:	07 0c 00 3c 00 f0 00 c0 03 00 07 fc 07 00 00 00     ...<............
	...
     6d3:	00 08 f8 03 fc 07 04 04 04 04 04 04 04 04 fc 07     ................
     6e3:	f8 03 00 00 00 00 00 00 00 00 00 00 07 fc 07 fc     ................
     6f3:	07 84 00 84 00 84 00 fc 00 78 00 00 00 00 00 00     .........x......
     703:	00 00 00 00 00 00 00 08 f8 03 fc 07 04 04 04 04     ................
     713:	04 04 04 0c fc 1f f8 13 00 00 00 00 00 00 00 00     ................
     723:	00 00 08 fc 07 fc 07 44 00 c4 00 c4 01 7c 03 38     .......D.....|.8
     733:	06 00 04 00 00 00 00 00 00 00 00 00 00 07 38 03     ..............8.
     743:	7c 04 44 04 44 04 44 04 c4 07 98 03 00 00 00 00     |.D.D.D.........
	...
     75b:	06 04 00 04 00 fc 07 fc 07 04 00 04 00 00 00 00     ................
	...
     773:	00 00 00 07 fc 03 fc 07 00 04 00 04 00 04 fc 07     ................
     783:	fc 03 00 00 00 00 00 00 00 00 00 00 00 00 08 1c     ................
     793:	00 7c 00 e0 01 80 07 80 07 e0 01 7c 00 1c 00 00     .|.........|....
	...
     7ab:	00 0c 3c 00 fc 01 c0 07 80 07 e0 01 7c 00 7c 00     ..<.........|.|.
     7bb:	e0 01 80 07 c0 07 fc 01 3c 00 00 00 08 0c 06 1c     ........<.......
     7cb:	07 b0 01 e0 00 e0 00 b0 01 1c 07 0c 06 00 00 00     ................
     7db:	00 00 00 00 00 00 00 08 0c 00 3c 00 70 00 c0 07     ..........<.p...
     7eb:	c0 07 70 00 3c 00 0c 00 00 00 00 00 00 00 00 00     ..p.<...........
     7fb:	00 00 06 04 07 84 07 c4 04 64 04 3c 04 1c 04 00     .........d.<....
	...
     817:	00 05 00 00 fe 1f fe 1f 02 10 02 10 00 00 00 00     ................
	...
     833:	06 06 00 18 00 60 00 80 01 00 06 00 18 00 00 00     .....`..........
	...
     84b:	00 00 00 05 00 00 02 10 02 10 fe 1f fe 1f 00 00     ................
	...
     867:	00 00 09 00 00 20 00 10 00 08 00 04 00 04 00 08     ..... ..........
     877:	00 10 00 20 00 00 00 00 00 00 00 00 00 08 00 10     ... ............
     887:	00 10 00 10 00 10 00 10 00 10 00 10 00 10 00 00     ................
	...
     89f:	05 00 00 00 00 02 00 06 00 04 00 00 00 00 00 00     ................
	...
     8b7:	00 00 00 07 00 03 a0 07 90 04 90 04 90 04 f0 07     ................
     8c7:	e0 07 00 00 00 00 00 00 00 00 00 00 00 00 07 fe     ................
     8d7:	07 fe 07 20 04 10 04 10 04 f0 07 e0 03 00 00 00     ... ............
	...
     8ef:	00 06 e0 03 f0 07 10 04 10 04 10 04 20 02 00 00     ............ ...
	...
     90b:	07 e0 03 f0 07 10 04 10 04 10 02 fe 07 fe 07 00     ................
	...
     923:	00 00 00 07 e0 03 f0 07 90 04 90 04 90 04 f0 04     ................
     933:	e0 02 00 00 00 00 00 00 00 00 00 00 00 00 05 10     ................
     943:	00 fc 07 fe 07 12 00 02 00 00 00 00 00 00 00 00     ................
	...
     95b:	00 07 e0 13 f0 27 10 24 10 24 10 22 f0 3f f0 1f     .....'.$.$.".?..
	...
     977:	07 fe 07 fe 07 20 00 10 00 10 00 f0 07 e0 07 00     ..... ..........
	...
     98f:	00 00 00 02 f6 07 f6 07 00 00 00 00 00 00 00 00     ................
	...
     9ab:	00 00 03 10 20 f6 3f f6 1f 00 00 00 00 00 00 00     .... .?.........
	...
     9c7:	00 06 fe 07 fe 07 c0 01 60 03 30 06 10 04 00 00     ........`.0.....
	...
     9e3:	02 fe 07 fe 07 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9fb:	00 00 00 0a f0 07 f0 07 10 00 10 00 f0 07 e0 07     ................
     a0b:	10 00 10 00 f0 07 e0 07 00 00 00 00 00 00 07 f0     ................
     a1b:	07 f0 07 20 00 10 00 10 00 f0 07 e0 07 00 00 00     ... ............
	...
     a33:	00 07 e0 03 f0 07 10 04 10 04 10 04 f0 07 e0 03     ................
	...
     a4f:	07 f0 3f f0 3f 20 04 10 04 10 04 f0 07 e0 03 00     ..?.? ..........
	...
     a67:	00 00 00 07 e0 03 f0 07 10 04 10 04 10 02 f0 3f     ...............?
     a77:	f0 3f 00 00 00 00 00 00 00 00 00 00 00 00 05 f0     .?..............
     a87:	07 f0 07 20 00 30 00 30 00 00 00 00 00 00 00 00     ... .0.0........
	...
     a9f:	00 06 60 02 f0 04 d0 04 90 05 90 07 20 03 00 00     ..`......... ...
	...
     abb:	05 10 00 fc 03 fc 07 10 04 10 04 00 00 00 00 00     ................
	...
     ad3:	00 00 00 07 f0 03 f0 07 00 04 00 04 00 02 f0 07     ................
     ae3:	f0 07 00 00 00 00 00 00 00 00 00 00 00 00 07 70     ...............p
     af3:	00 f0 01 80 07 00 06 80 07 f0 01 70 00 00 00 00     ...........p....
	...
     b0b:	00 0a 30 00 f0 01 c0 07 00 07 f0 00 f0 00 00 07     ..0.............
     b1b:	c0 07 f0 01 30 00 00 00 00 00 00 00 06 30 06 70     ....0........0.p
     b2b:	07 c0 01 c0 01 70 07 30 06 00 00 00 00 00 00 00     .....p.0........
     b3b:	00 00 00 00 00 00 00 07 70 00 f0 01 80 37 00 3e     ........p....7.>
     b4b:	80 0f f0 01 70 00 00 00 00 00 00 00 00 00 00 00     ....p...........
     b5b:	00 00 06 10 06 10 07 90 05 d0 04 70 04 30 04 00     ...........p.0..
	...
     b77:	00 06 40 00 40 00 fc 0f be 1f 02 10 02 10 00 00     ..@.@...........
	...
     b93:	04 00 00 00 00 fe 1f fe 1f 00 00 00 00 00 00 00     ................
	...
     bab:	00 00 00 06 02 10 02 10 be 1f fc 0f 40 00 40 00     ............@.@.
	...
     bc7:	00 00 0a c0 01 60 00 60 00 60 00 e0 00 c0 01 80     .....`.`.`......
     bd7:	01 80 01 80 01 e0 00 00 00 00 00 00 00 04 fe 07     ................
     be7:	fe 07 02 04 02 04 00 00 00 00 00 00 00 00 00 00     ................
	...

00000c00 <__ctors_end>:
     c00:	11 24       	eor	r1, r1
     c02:	1f be       	out	0x3f, r1	; 63
     c04:	cf ef       	ldi	r28, 0xFF	; 255
     c06:	d8 e0       	ldi	r29, 0x08	; 8
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	cd bf       	out	0x3d, r28	; 61

00000c0c <__do_copy_data>:
     c0c:	11 e0       	ldi	r17, 0x01	; 1
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b1 e0       	ldi	r27, 0x01	; 1
     c12:	ea e7       	ldi	r30, 0x7A	; 122
     c14:	ff e2       	ldi	r31, 0x2F	; 47
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <__do_copy_data+0x10>
     c18:	05 90       	lpm	r0, Z+
     c1a:	0d 92       	st	X+, r0
     c1c:	a0 37       	cpi	r26, 0x70	; 112
     c1e:	b1 07       	cpc	r27, r17
     c20:	d9 f7       	brne	.-10     	; 0xc18 <__do_copy_data+0xc>

00000c22 <__do_clear_bss>:
     c22:	25 e0       	ldi	r18, 0x05	; 5
     c24:	a0 e7       	ldi	r26, 0x70	; 112
     c26:	b1 e0       	ldi	r27, 0x01	; 1
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <.do_clear_bss_start>

00000c2a <.do_clear_bss_loop>:
     c2a:	1d 92       	st	X+, r1

00000c2c <.do_clear_bss_start>:
     c2c:	a0 38       	cpi	r26, 0x80	; 128
     c2e:	b2 07       	cpc	r27, r18
     c30:	e1 f7       	brne	.-8      	; 0xc2a <.do_clear_bss_loop>
     c32:	0e 94 b8 08 	call	0x1170	; 0x1170 <main>
     c36:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <_exit>

00000c3a <__bad_interrupt>:
     c3a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c3e <ActualizarGLCD>:
	Implementar_PID(&PID_Caldera,TermoK._TerTempC);
	//PWM_CALDERA=255;
}
/*
*/
void ActualizarGLCD(){
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	c4 56       	subi	r28, 0x64	; 100
     c50:	d1 09       	sbc	r29, r1
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
	char cadena[100];
	GLCD_GotoXY(22,5);
     c5c:	65 e0       	ldi	r22, 0x05	; 5
     c5e:	86 e1       	ldi	r24, 0x16	; 22
     c60:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
	sprintf_P(cadena,PSTR("%d "),(uint16_t)PID_Caldera._Setpoint);
     c64:	0f 2e       	mov	r0, r31
     c66:	f8 e1       	ldi	r31, 0x18	; 24
     c68:	ef 2e       	mov	r14, r31
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	f7 01       	movw	r30, r14
     c72:	65 8d       	ldd	r22, Z+29	; 0x1d
     c74:	76 8d       	ldd	r23, Z+30	; 0x1e
     c76:	87 8d       	ldd	r24, Z+31	; 0x1f
     c78:	90 a1       	ldd	r25, Z+32	; 0x20
     c7a:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
     c7e:	7f 93       	push	r23
     c80:	6f 93       	push	r22
     c82:	8a e7       	ldi	r24, 0x7A	; 122
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	9f 93       	push	r25
     c88:	8f 93       	push	r24
     c8a:	8e 01       	movw	r16, r28
     c8c:	0f 5f       	subi	r16, 0xFF	; 255
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	1f 93       	push	r17
     c92:	0f 93       	push	r16
     c94:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <sprintf_P>
	GLCD_PrintString(cadena);
     c98:	c8 01       	movw	r24, r16
     c9a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <GLCD_PrintString>
	GLCD_GotoXY(85,5);
     c9e:	65 e0       	ldi	r22, 0x05	; 5
     ca0:	85 e5       	ldi	r24, 0x55	; 85
     ca2:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
	sprintf_P(cadena,PSTR("%.2f "),TermoK._TerTempC);
     ca6:	ef e5       	ldi	r30, 0x5F	; 95
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	82 85       	ldd	r24, Z+10	; 0x0a
     cac:	8f 93       	push	r24
     cae:	81 85       	ldd	r24, Z+9	; 0x09
     cb0:	8f 93       	push	r24
     cb2:	80 85       	ldd	r24, Z+8	; 0x08
     cb4:	8f 93       	push	r24
     cb6:	87 81       	ldd	r24, Z+7	; 0x07
     cb8:	8f 93       	push	r24
     cba:	84 e7       	ldi	r24, 0x74	; 116
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	1f 93       	push	r17
     cc4:	0f 93       	push	r16
     cc6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <sprintf_P>
	GLCD_PrintString(cadena);
     cca:	c8 01       	movw	r24, r16
     ccc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <GLCD_PrintString>
	GLCD_GotoXY(50,32);
     cd0:	60 e2       	ldi	r22, 0x20	; 32
     cd2:	82 e3       	ldi	r24, 0x32	; 50
     cd4:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
	sprintf_P(cadena,PSTR("Er: %d   "),(uint16_t)PID_Caldera._Error[0]);
     cd8:	f7 01       	movw	r30, r14
     cda:	61 a1       	ldd	r22, Z+33	; 0x21
     cdc:	72 a1       	ldd	r23, Z+34	; 0x22
     cde:	83 a1       	ldd	r24, Z+35	; 0x23
     ce0:	94 a1       	ldd	r25, Z+36	; 0x24
     ce2:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
     ce6:	7f 93       	push	r23
     ce8:	6f 93       	push	r22
     cea:	8a e6       	ldi	r24, 0x6A	; 106
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	1f 93       	push	r17
     cf4:	0f 93       	push	r16
     cf6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <sprintf_P>
	GLCD_PrintString(cadena);
     cfa:	c8 01       	movw	r24, r16
     cfc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <GLCD_PrintString>
	GLCD_Render();
     d00:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GLCD_Render>
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	cc 59       	subi	r28, 0x9C	; 156
     d10:	df 4f       	sbci	r29, 0xFF	; 255
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <EjecutarScheduler>:
	uint16_t Intervalo;//cada cuantos milisegundos se ejecuta la tarea
	uint32_t AntmsTick;//variable para almacenar los misilesgundos transcurridos
	void (*Funcion)(void);// funcion puntero para ejecutar las tareas
}STareas;

void EjecutarScheduler(STareas *Pntr,uint32_t Tic){
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	7c 01       	movw	r14, r24
	for (uint8_t IndexTarea=0;IndexTarea<NroTareas; IndexTarea++)//Realiza un barrido por cada Tarea
     d42:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <NroTareas>
     d46:	99 23       	and	r25, r25
     d48:	89 f1       	breq	.+98     	; 0xdac <EjecutarScheduler+0x82>
     d4a:	4a 01       	movw	r8, r20
     d4c:	5b 01       	movw	r10, r22
     d4e:	d1 2c       	mov	r13, r1
	{
		if (Pntr[IndexTarea].Intervalo == 0)//Si hay alguna tarea cuyo intervalo sea 0; se ejecuta de forma inmediata
     d50:	e7 01       	movw	r28, r14
     d52:	28 e0       	ldi	r18, 0x08	; 8
     d54:	d2 9e       	mul	r13, r18
     d56:	c0 0d       	add	r28, r0
     d58:	d1 1d       	adc	r29, r1
     d5a:	11 24       	eor	r1, r1
     d5c:	08 81       	ld	r16, Y
     d5e:	19 81       	ldd	r17, Y+1	; 0x01
     d60:	01 15       	cp	r16, r1
     d62:	11 05       	cpc	r17, r1
     d64:	21 f4       	brne	.+8      	; 0xd6e <EjecutarScheduler+0x44>
		{
			(*Pntr[IndexTarea].Funcion)();
     d66:	ee 81       	ldd	r30, Y+6	; 0x06
     d68:	ff 81       	ldd	r31, Y+7	; 0x07
     d6a:	09 95       	icall
     d6c:	1a c0       	rjmp	.+52     	; 0xda2 <EjecutarScheduler+0x78>
		}
		else if((Tic-Pntr[IndexTarea].AntmsTick) >= Pntr[IndexTarea].Intervalo)//Verifica que ha pasado el intervalo de cada tarea y la Ejecuta
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	ac 81       	ldd	r26, Y+4	; 0x04
     d74:	bd 81       	ldd	r27, Y+5	; 0x05
     d76:	a5 01       	movw	r20, r10
     d78:	94 01       	movw	r18, r8
     d7a:	28 1b       	sub	r18, r24
     d7c:	39 0b       	sbc	r19, r25
     d7e:	4a 0b       	sbc	r20, r26
     d80:	5b 0b       	sbc	r21, r27
     d82:	da 01       	movw	r26, r20
     d84:	c9 01       	movw	r24, r18
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	80 17       	cp	r24, r16
     d8c:	91 07       	cpc	r25, r17
     d8e:	a2 07       	cpc	r26, r18
     d90:	b3 07       	cpc	r27, r19
     d92:	38 f0       	brcs	.+14     	; 0xda2 <EjecutarScheduler+0x78>
		{
			(*Pntr[IndexTarea].Funcion)();
     d94:	ee 81       	ldd	r30, Y+6	; 0x06
     d96:	ff 81       	ldd	r31, Y+7	; 0x07
     d98:	09 95       	icall
			Pntr[IndexTarea].AntmsTick=Tic;
     d9a:	8a 82       	std	Y+2, r8	; 0x02
     d9c:	9b 82       	std	Y+3, r9	; 0x03
     d9e:	ac 82       	std	Y+4, r10	; 0x04
     da0:	bd 82       	std	Y+5, r11	; 0x05
	uint32_t AntmsTick;//variable para almacenar los misilesgundos transcurridos
	void (*Funcion)(void);// funcion puntero para ejecutar las tareas
}STareas;

void EjecutarScheduler(STareas *Pntr,uint32_t Tic){
	for (uint8_t IndexTarea=0;IndexTarea<NroTareas; IndexTarea++)//Realiza un barrido por cada Tarea
     da2:	d3 94       	inc	r13
     da4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <NroTareas>
     da8:	d8 16       	cp	r13, r24
     daa:	90 f2       	brcs	.-92     	; 0xd50 <EjecutarScheduler+0x26>
		{
			(*Pntr[IndexTarea].Funcion)();
			Pntr[IndexTarea].AntmsTick=Tic;
		}
	}
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	08 95       	ret

00000dc4 <__vector_9>:
    }
}
/************************************************************************/
/*				INTERRUPCIONES                                                  */
/************************************************************************/
ISR(TIMER2_OVF_vect){
     dc4:	1f 92       	push	r1
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	0f 92       	push	r0
     dcc:	11 24       	eor	r1, r1
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
	Cada2++;// Configurado el micro a 8Mhz cada dos overflows equivalen a 1ms
     dd6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <Cada2>
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <Cada2>
	if(Cada2==2){
     de0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <Cada2>
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	a9 f4       	brne	.+42     	; 0xe12 <__vector_9+0x4e>
		msTick++;
     de8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
     dec:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <__data_end+0x1>
     df0:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <__data_end+0x2>
     df4:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <__data_end+0x3>
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	a1 1d       	adc	r26, r1
     dfc:	b1 1d       	adc	r27, r1
     dfe:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end>
     e02:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <__data_end+0x1>
     e06:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <__data_end+0x2>
     e0a:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <__data_end+0x3>
		Cada2=0;
     e0e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Cada2>
	}
}
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <__vector_5>:
ISR(PCINT2_vect){
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
	cli();
     e52:	f8 94       	cli
	if (T_MAS_PULSADO)
     e54:	4a 9b       	sbis	0x09, 2	; 9
     e56:	10 c0       	rjmp	.+32     	; 0xe78 <__vector_5+0x54>
	{
		PID_Caldera._Setpoint=PID_Caldera._Setpoint+5;//Incremeta el Setpoint
     e58:	c8 e1       	ldi	r28, 0x18	; 24
     e5a:	d1 e0       	ldi	r29, 0x01	; 1
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 ea       	ldi	r20, 0xA0	; 160
     e62:	50 e4       	ldi	r21, 0x40	; 64
     e64:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e66:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e68:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e6a:	98 a1       	ldd	r25, Y+32	; 0x20
     e6c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
     e70:	6d 8f       	std	Y+29, r22	; 0x1d
     e72:	7e 8f       	std	Y+30, r23	; 0x1e
     e74:	8f 8f       	std	Y+31, r24	; 0x1f
     e76:	98 a3       	std	Y+32, r25	; 0x20
	}
	if (T_MINUS_PULSADO)
     e78:	4b 9b       	sbis	0x09, 3	; 9
     e7a:	25 c0       	rjmp	.+74     	; 0xec6 <__vector_5+0xa2>
	{
		PID_Caldera._Setpoint=(PID_Caldera._Setpoint>0)?PID_Caldera._Setpoint-5:0;//Disminuye el Setpoint pero evita valores menores a 0
     e7c:	c0 90 35 01 	lds	r12, 0x0135	; 0x800135 <PID_Caldera+0x1d>
     e80:	d0 90 36 01 	lds	r13, 0x0136	; 0x800136 <PID_Caldera+0x1e>
     e84:	e0 90 37 01 	lds	r14, 0x0137	; 0x800137 <PID_Caldera+0x1f>
     e88:	f0 90 38 01 	lds	r15, 0x0138	; 0x800138 <PID_Caldera+0x20>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	c7 01       	movw	r24, r14
     e94:	b6 01       	movw	r22, r12
     e96:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	4c f4       	brge	.+18     	; 0xeb0 <__vector_5+0x8c>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 ea       	ldi	r20, 0xA0	; 160
     ea4:	50 e4       	ldi	r21, 0x40	; 64
     ea6:	c7 01       	movw	r24, r14
     ea8:	b6 01       	movw	r22, r12
     eaa:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__vector_5+0x92>
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	cb 01       	movw	r24, r22
     eb6:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <PID_Caldera+0x1d>
     eba:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <PID_Caldera+0x1e>
     ebe:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PID_Caldera+0x1f>
     ec2:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PID_Caldera+0x20>
	}
	sei();
     ec6:	78 94       	sei
}
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	df 90       	pop	r13
     eea:	cf 90       	pop	r12
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <ConfPulsadores>:
/*
*/
void ConfPulsadores(){
	DDRD&=~((1<<T_MAS)|(1<<T_MINUS));
     ef6:	8a b1       	in	r24, 0x0a	; 10
     ef8:	83 7f       	andi	r24, 0xF3	; 243
     efa:	8a b9       	out	0x0a, r24	; 10
	
	EICRA=(1<<ISC11);//Lanza interrupcion en flanco ascendente
     efc:	88 e0       	ldi	r24, 0x08	; 8
     efe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	PCICR=(1<<PCIE2);
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2=(1<<PCINT18)|(1<<PCINT19);//Activa la interrupcion de cambio de estado en los pines de los pulsadores
     f08:	8c e0       	ldi	r24, 0x0C	; 12
     f0a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     f0e:	08 95       	ret

00000f10 <ConfTimers>:
}
/*
*/
void ConfTimers(){
	/**********************Timer 2 SysClock*************************************************************/
	TCCR2A|=(1<<COM2A1)|(1<<COM2B1)|(1<<WGM20);//modo PWM, Phase correct
     f10:	e0 eb       	ldi	r30, 0xB0	; 176
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	81 6a       	ori	r24, 0xA1	; 161
     f18:	80 83       	st	Z, r24
	TCCR2B=(1<<CS21);//preescala de 8
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2=(1<<TOIE2);//interrupcion de overflow activada
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0;
     f26:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	/**********************Timer 0 PWM*************************************************************/
	TCCR0A|=(1<<COM0A1)|(1<<COM0B1)|(1<<WGM00);	//modo PWM,Phase correct
     f2a:	84 b5       	in	r24, 0x24	; 36
     f2c:	81 6a       	ori	r24, 0xA1	; 161
     f2e:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00)|(1<<CS01);//preescala de 64
     f30:	85 b5       	in	r24, 0x25	; 37
     f32:	83 60       	ori	r24, 0x03	; 3
     f34:	85 bd       	out	0x25, r24	; 37
	DDRD|=(1<<PIND6);// PIND6 PWM (OCR0A) de la caldera
     f36:	56 9a       	sbi	0x0a, 6	; 10
     f38:	08 95       	ret

00000f3a <ConfSPIMaestro>:
}
/*
*/
void ConfSPIMaestro(){
	DDRB|=(1<<MOSI) | (1<<SCK) | (1<<SS); // Configura como salidas MOSI,SCK y SS
     f3a:	84 b1       	in	r24, 0x04	; 4
     f3c:	8c 62       	ori	r24, 0x2C	; 44
     f3e:	84 b9       	out	0x04, r24	; 4
	SPCR= (1<<SPE) | (1<<MSTR) | (1<<SPR0)|(1<<SPR1); //SPI modo maestro FClk/64
     f40:	83 e5       	ldi	r24, 0x53	; 83
     f42:	8c bd       	out	0x2c, r24	; 44
	//SPSR= (1<<SPI2X);
	PORTB|=(1<<SS);
     f44:	2a 9a       	sbi	0x05, 2	; 5
     f46:	08 95       	ret

00000f48 <MAX31855Leer>:
}
/*
*/
uint8_t  MAX31855Leer(MAX31855 *M)
{
     f48:	8f 92       	push	r8
     f4a:	9f 92       	push	r9
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
    uint8_t n;
	uint16_t Temp1;
	uint16_t Temp2;
	//Leer datos
    *M->_CSDir&=~(1<<M->_CSPin);    // Inica transmison
     f62:	3a 81       	ldd	r19, Y+2	; 0x02
     f64:	e8 81       	ld	r30, Y
     f66:	f9 81       	ldd	r31, Y+1	; 0x01
     f68:	20 81       	ld	r18, Z
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <MAX31855Leer+0x2c>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	3a 95       	dec	r19
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <MAX31855Leer+0x28>
     f78:	80 95       	com	r24
     f7a:	90 95       	com	r25
     f7c:	82 23       	and	r24, r18
     f7e:	80 83       	st	Z, r24
	M->_Trama=0;
     f80:	1b 82       	std	Y+3, r1	; 0x03
     f82:	1c 82       	std	Y+4, r1	; 0x04
     f84:	1d 82       	std	Y+5, r1	; 0x05
     f86:	1e 82       	std	Y+6, r1	; 0x06
     f88:	24 e0       	ldi	r18, 0x04	; 4
    for (n=0; n<4; n++)
    {
        SPDR = 0;                         // Enviamos un dato vacio
     f8a:	1e bc       	out	0x2e, r1	; 46
        while ((SPSR & (1<<SPIF)) == 0)  ;    // esperamos a que termine de leer
     f8c:	0d b4       	in	r0, 0x2d	; 45
     f8e:	07 fe       	sbrs	r0, 7
     f90:	fd cf       	rjmp	.-6      	; 0xf8c <MAX31855Leer+0x44>
        M->_Trama = (M->_Trama<<8) + SPDR;                // Agregamos el paquete a la trama
     f92:	3e b5       	in	r19, 0x2e	; 46
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	ad 81       	ldd	r26, Y+5	; 0x05
     f9a:	be 81       	ldd	r27, Y+6	; 0x06
     f9c:	ba 2f       	mov	r27, r26
     f9e:	a9 2f       	mov	r26, r25
     fa0:	98 2f       	mov	r25, r24
     fa2:	88 27       	eor	r24, r24
     fa4:	83 0f       	add	r24, r19
     fa6:	91 1d       	adc	r25, r1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	ad 83       	std	Y+5, r26	; 0x05
     fb2:	be 83       	std	Y+6, r27	; 0x06
     fb4:	21 50       	subi	r18, 0x01	; 1
	uint16_t Temp1;
	uint16_t Temp2;
	//Leer datos
    *M->_CSDir&=~(1<<M->_CSPin);    // Inica transmison
	M->_Trama=0;
    for (n=0; n<4; n++)
     fb6:	49 f7       	brne	.-46     	; 0xf8a <MAX31855Leer+0x42>
    {
        SPDR = 0;                         // Enviamos un dato vacio
        while ((SPSR & (1<<SPIF)) == 0)  ;    // esperamos a que termine de leer
        M->_Trama = (M->_Trama<<8) + SPDR;                // Agregamos el paquete a la trama
    }
    *M->_CSDir|=(1<<M->_CSPin);         // Terminamos la transmision
     fb8:	3a 81       	ldd	r19, Y+2	; 0x02
     fba:	e8 81       	ld	r30, Y
     fbc:	f9 81       	ldd	r31, Y+1	; 0x01
     fbe:	20 81       	ld	r18, Z
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <MAX31855Leer+0x82>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	3a 95       	dec	r19
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <MAX31855Leer+0x7e>
     fce:	82 2b       	or	r24, r18
     fd0:	80 83       	st	Z, r24
	
	Temp1=(uint16_t)(M->_Trama>>16);
     fd2:	8b 80       	ldd	r8, Y+3	; 0x03
     fd4:	9c 80       	ldd	r9, Y+4	; 0x04
     fd6:	ad 80       	ldd	r10, Y+5	; 0x05
     fd8:	be 80       	ldd	r11, Y+6	; 0x06
     fda:	65 01       	movw	r12, r10
     fdc:	ee 24       	eor	r14, r14
     fde:	ff 24       	eor	r15, r15
	Temp2=(uint16_t)(M->_Trama);
	n= FALSE;
	if (Temp1 & 0x8000)
     fe0:	86 01       	movw	r16, r12
	{
		n=TRUE;
	}
	//Verificar Error
	if(Temp1 & 0x1){
     fe2:	c6 01       	movw	r24, r12
     fe4:	81 70       	andi	r24, 0x01	; 1
     fe6:	99 27       	eor	r25, r25
     fe8:	89 2b       	or	r24, r25
     fea:	51 f1       	breq	.+84     	; 0x1040 <MAX31855Leer+0xf8>
		Env_Usart_P(USART0,PSTR("Error...\r\n"));
     fec:	68 ec       	ldi	r22, 0xC8	; 200
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Env_Usart_P>
		if (Temp2 & 0x1)
     ff6:	c4 01       	movw	r24, r8
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	99 27       	eor	r25, r25
     ffc:	89 2b       	or	r24, r25
     ffe:	39 f0       	breq	.+14     	; 0x100e <MAX31855Leer+0xc6>
		{
			Env_Usart_P(USART0,PSTR("Circuito Abierto\r\n"));
    1000:	65 eb       	ldi	r22, 0xB5	; 181
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Env_Usart_P>
			M->_STATUS=OC;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	8f 87       	std	Y+15, r24	; 0x0f
		}
		if (Temp2 & 0x2)
    100e:	c4 01       	movw	r24, r8
    1010:	82 70       	andi	r24, 0x02	; 2
    1012:	99 27       	eor	r25, r25
    1014:	89 2b       	or	r24, r25
    1016:	39 f0       	breq	.+14     	; 0x1026 <MAX31855Leer+0xde>
		{
			Env_Usart_P(USART0,PSTR("Corto VCC\r\n"));
    1018:	69 ea       	ldi	r22, 0xA9	; 169
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Env_Usart_P>
			M->_STATUS=VCC_SC;
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	8f 87       	std	Y+15, r24	; 0x0f
		}
		if (Temp2 & 0x4)
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	88 22       	and	r8, r24
    102a:	99 24       	eor	r9, r9
    102c:	89 28       	or	r8, r9
    102e:	49 f0       	breq	.+18     	; 0x1042 <MAX31855Leer+0xfa>
		{
			Env_Usart_P(USART0,PSTR("Corto GND\r\n"));
    1030:	6d e9       	ldi	r22, 0x9D	; 157
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Env_Usart_P>
			M->_STATUS=GND_SC;
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	8f 87       	std	Y+15, r24	; 0x0f
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <MAX31855Leer+0xfa>
		}
	}else{
		M->_STATUS=OK;
    1040:	1f 86       	std	Y+15, r1	; 0x0f
	}
	//Extraes solo la temperatura de la termocupla
	Temp1&=0x7FFC;
    1042:	8c ef       	ldi	r24, 0xFC	; 252
    1044:	c8 22       	and	r12, r24
    1046:	e8 94       	clt
    1048:	d7 f8       	bld	r13, 7
	//Desplazas hacia la derecha
	Temp1>>=2;
	//Almacena el valor de Temperatura de la termocupla
	M->_TerTempC=Temp1;
	M->_TerTempC*=0.25;
    104a:	d6 94       	lsr	r13
    104c:	c7 94       	ror	r12
    104e:	d6 94       	lsr	r13
    1050:	c7 94       	ror	r12
    1052:	b6 01       	movw	r22, r12
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__floatunsisf>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5e e3       	ldi	r21, 0x3E	; 62
    1064:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
	if (n==TRUE)
    1068:	11 23       	and	r17, r17
    106a:	2c f0       	brlt	.+10     	; 0x1076 <MAX31855Leer+0x12e>
	Temp1&=0x7FFC;
	//Desplazas hacia la derecha
	Temp1>>=2;
	//Almacena el valor de Temperatura de la termocupla
	M->_TerTempC=Temp1;
	M->_TerTempC*=0.25;
    106c:	6f 83       	std	Y+7, r22	; 0x07
    106e:	78 87       	std	Y+8, r23	; 0x08
    1070:	89 87       	std	Y+9, r24	; 0x09
    1072:	9a 87       	std	Y+10, r25	; 0x0a
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <MAX31855Leer+0x13c>
	if (n==TRUE)
	{
		M->_TerTempC*=-1;
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	b0 58       	subi	r27, 0x80	; 128
    107c:	8f 83       	std	Y+7, r24	; 0x07
    107e:	98 87       	std	Y+8, r25	; 0x08
    1080:	a9 87       	std	Y+9, r26	; 0x09
    1082:	ba 87       	std	Y+10, r27	; 0x0a
	}
	return M->_STATUS;
}
    1084:	8f 85       	ldd	r24, Y+15	; 0x0f
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	af 90       	pop	r10
    109a:	9f 90       	pop	r9
    109c:	8f 90       	pop	r8
    109e:	08 95       	ret

000010a0 <LecturaTermo>:
		Pntr->_U_sat=round(_PWM);
	 }
}
/*
*/
void LecturaTermo(){
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	c4 56       	subi	r28, 0x64	; 100
    10ae:	d1 09       	sbc	r29, r1
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
	char cadena[100];
	MAX31855Leer(&TermoK);
    10ba:	8f e5       	ldi	r24, 0x5F	; 95
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	0e 94 a4 07 	call	0xf48	; 0xf48 <MAX31855Leer>
	sprintf_P(cadena,PSTR("$$d%.2f#d%.2f#QQ\r\n"),TermoK._TerTempC,PID_Caldera._Setpoint);
    10c2:	e8 e1       	ldi	r30, 0x18	; 24
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	80 a1       	ldd	r24, Z+32	; 0x20
    10c8:	8f 93       	push	r24
    10ca:	87 8d       	ldd	r24, Z+31	; 0x1f
    10cc:	8f 93       	push	r24
    10ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    10d0:	8f 93       	push	r24
    10d2:	85 8d       	ldd	r24, Z+29	; 0x1d
    10d4:	8f 93       	push	r24
    10d6:	ef e5       	ldi	r30, 0x5F	; 95
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	82 85       	ldd	r24, Z+10	; 0x0a
    10dc:	8f 93       	push	r24
    10de:	81 85       	ldd	r24, Z+9	; 0x09
    10e0:	8f 93       	push	r24
    10e2:	80 85       	ldd	r24, Z+8	; 0x08
    10e4:	8f 93       	push	r24
    10e6:	87 81       	ldd	r24, Z+7	; 0x07
    10e8:	8f 93       	push	r24
    10ea:	8e e7       	ldi	r24, 0x7E	; 126
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	8e 01       	movw	r16, r28
    10f4:	0f 5f       	subi	r16, 0xFF	; 255
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	1f 93       	push	r17
    10fa:	0f 93       	push	r16
    10fc:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <sprintf_P>
	Env_Usart(USART0,cadena);
    1100:	b8 01       	movw	r22, r16
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 49 0b 	call	0x1692	; 0x1692 <Env_Usart>
}
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cc 59       	subi	r28, 0x9C	; 156
    1114:	df 4f       	sbci	r29, 0xFF	; 255
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <CargarPlantilla>:
	}
	return M->_STATUS;
}
/*
*/
void CargarPlantilla(){
    112a:	0f 93       	push	r16
	GLCD_SetFont(Tahoma13x14,13,14,GLCD_Overwrite);
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	4e e0       	ldi	r20, 0x0E	; 14
    1130:	6d e0       	ldi	r22, 0x0D	; 13
    1132:	8f ed       	ldi	r24, 0xDF	; 223
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GLCD_SetFont>
	GLCD_GotoXY(1,5);
    113a:	65 e0       	ldi	r22, 0x05	; 5
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
	GLCD_PrintString_P(PSTR("Td: 0"));
    1142:	87 e9       	ldi	r24, 0x97	; 151
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GLCD_PrintString_P>
	GLCD_GotoXY(60,5);
    114a:	65 e0       	ldi	r22, 0x05	; 5
    114c:	8c e3       	ldi	r24, 0x3C	; 60
    114e:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
	GLCD_PrintString_P(PSTR("Tm: 0"));
    1152:	81 e9       	ldi	r24, 0x91	; 145
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GLCD_PrintString_P>
	//Eje de Graficacion
	GLCD_DrawRectangle(1,20,127,63,GLCD_Black);
    115a:	0f ef       	ldi	r16, 0xFF	; 255
    115c:	2f e3       	ldi	r18, 0x3F	; 63
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	64 e1       	ldi	r22, 0x14	; 20
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GLCD_DrawRectangle>
	GLCD_Render();
    1168:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GLCD_Render>
}
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <main>:
};
/*
*/
int main(void)
{
	ConfPulsadores();
    1170:	0e 94 7b 07 	call	0xef6	; 0xef6 <ConfPulsadores>
	ConfTimers();
    1174:	0e 94 88 07 	call	0xf10	; 0xf10 <ConfTimers>
	ConfSPIMaestro();
    1178:	0e 94 9d 07 	call	0xf3a	; 0xf3a <ConfSPIMaestro>
	Inicia_Usart(USART0,round(MiUBRR0));
    117c:	68 e0       	ldi	r22, 0x08	; 8
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0e 94 37 0b 	call	0x166e	; 0x166e <Inicia_Usart>
	Env_Usart_P(USART0,PSTR("Iniciando\r\n"));
    1186:	63 ed       	ldi	r22, 0xD3	; 211
    1188:	71 e0       	ldi	r23, 0x01	; 1
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Env_Usart_P>
	GLCD_Setup();
    1190:	0e 94 1d 0c 	call	0x183a	; 0x183a <GLCD_Setup>
	CargarPlantilla();
    1194:	0e 94 95 08 	call	0x112a	; 0x112a <CargarPlantilla>
	sei();//Activar interrupciones
    1198:	78 94       	sei
	
	NroTareas=sizeof(Tareas)/sizeof(*Tareas);//Especificar el numero de tareas
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <NroTareas>
    for(;;)
    {
		EjecutarScheduler(Tareas,msTick);
    11a0:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <__data_end>
    11a4:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <__data_end+0x1>
    11a8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <__data_end+0x2>
    11ac:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <__data_end+0x3>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 95 06 	call	0xd2a	; 0xd2a <EjecutarScheduler>
    11b8:	f3 cf       	rjmp	.-26     	; 0x11a0 <main+0x30>

000011ba <Implementar_PID>:
	GLCD_Render();
}
/*

*/
 void Implementar_PID(PID *Pntr, float medida){
    11ba:	4f 92       	push	r4
    11bc:	5f 92       	push	r5
    11be:	6f 92       	push	r6
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	2a 97       	sbiw	r28, 0x0a	; 10
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	9a 87       	std	Y+10, r25	; 0x0a
    11e8:	89 87       	std	Y+9, r24	; 0x09
	 float _PWM;
	 Pntr->_Medida=medida;
    11ea:	dc 01       	movw	r26, r24
    11ec:	59 96       	adiw	r26, 0x19	; 25
    11ee:	4d 93       	st	X+, r20
    11f0:	5d 93       	st	X+, r21
    11f2:	6d 93       	st	X+, r22
    11f4:	7c 93       	st	X, r23
    11f6:	5c 97       	sbiw	r26, 0x1c	; 28
	 Pntr->_Error[0]=Pntr->_Setpoint-Pntr->_Medida;//error
    11f8:	9a 01       	movw	r18, r20
    11fa:	ab 01       	movw	r20, r22
    11fc:	5d 96       	adiw	r26, 0x1d	; 29
    11fe:	6d 91       	ld	r22, X+
    1200:	7d 91       	ld	r23, X+
    1202:	8d 91       	ld	r24, X+
    1204:	9c 91       	ld	r25, X
    1206:	90 97       	sbiw	r26, 0x20	; 32
    1208:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
    120c:	6b 01       	movw	r12, r22
    120e:	7c 01       	movw	r14, r24
    1210:	e9 85       	ldd	r30, Y+9	; 0x09
    1212:	fa 85       	ldd	r31, Y+10	; 0x0a
    1214:	61 a3       	std	Z+33, r22	; 0x21
    1216:	72 a3       	std	Z+34, r23	; 0x22
    1218:	83 a3       	std	Z+35, r24	; 0x23
    121a:	94 a3       	std	Z+36, r25	; 0x24
	 
	 if (Pntr->_Tipo == PARALELO)// modo paralelo 
    121c:	80 81       	ld	r24, Z
    121e:	81 11       	cpse	r24, r1
    1220:	05 c1       	rjmp	.+522    	; 0x142c <Implementar_PID+0x272>
	 {
		 Pntr->_P=Pntr->_kp*Pntr->_Error[0];// parte proporcional
    1222:	21 81       	ldd	r18, Z+1	; 0x01
    1224:	32 81       	ldd	r19, Z+2	; 0x02
    1226:	43 81       	ldd	r20, Z+3	; 0x03
    1228:	54 81       	ldd	r21, Z+4	; 0x04
    122a:	c7 01       	movw	r24, r14
    122c:	b6 01       	movw	r22, r12
    122e:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1232:	4b 01       	movw	r8, r22
    1234:	5c 01       	movw	r10, r24
    1236:	a9 85       	ldd	r26, Y+9	; 0x09
    1238:	ba 85       	ldd	r27, Y+10	; 0x0a
    123a:	1d 96       	adiw	r26, 0x0d	; 13
    123c:	6d 93       	st	X+, r22
    123e:	7d 93       	st	X+, r23
    1240:	8d 93       	st	X+, r24
    1242:	9c 93       	st	X, r25
    1244:	50 97       	sbiw	r26, 0x10	; 16
		 Pntr->_I+=Pntr->_ki*(Pntr->_Error[0]-Pntr->_Anti_windup)*Pntr->_Delta_t;//parte integral - bc Anti windup
    1246:	d3 96       	adiw	r26, 0x33	; 51
    1248:	4d 90       	ld	r4, X+
    124a:	5d 90       	ld	r5, X+
    124c:	6d 90       	ld	r6, X+
    124e:	7c 90       	ld	r7, X
    1250:	d6 97       	sbiw	r26, 0x36	; 54
    1252:	d7 96       	adiw	r26, 0x37	; 55
    1254:	2d 91       	ld	r18, X+
    1256:	3d 91       	ld	r19, X+
    1258:	4d 91       	ld	r20, X+
    125a:	5c 91       	ld	r21, X
    125c:	da 97       	sbiw	r26, 0x3a	; 58
    125e:	c7 01       	movw	r24, r14
    1260:	b6 01       	movw	r22, r12
    1262:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
    1266:	e9 85       	ldd	r30, Y+9	; 0x09
    1268:	fa 85       	ldd	r31, Y+10	; 0x0a
    126a:	25 81       	ldd	r18, Z+5	; 0x05
    126c:	36 81       	ldd	r19, Z+6	; 0x06
    126e:	47 81       	ldd	r20, Z+7	; 0x07
    1270:	50 85       	ldd	r21, Z+8	; 0x08
    1272:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1276:	a3 01       	movw	r20, r6
    1278:	92 01       	movw	r18, r4
    127a:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    127e:	a9 85       	ldd	r26, Y+9	; 0x09
    1280:	ba 85       	ldd	r27, Y+10	; 0x0a
    1282:	51 96       	adiw	r26, 0x11	; 17
    1284:	2d 91       	ld	r18, X+
    1286:	3d 91       	ld	r19, X+
    1288:	4d 91       	ld	r20, X+
    128a:	5c 91       	ld	r21, X
    128c:	54 97       	sbiw	r26, 0x14	; 20
    128e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    1292:	69 83       	std	Y+1, r22	; 0x01
    1294:	7a 83       	std	Y+2, r23	; 0x02
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	e9 85       	ldd	r30, Y+9	; 0x09
    129c:	fa 85       	ldd	r31, Y+10	; 0x0a
    129e:	61 8b       	std	Z+17, r22	; 0x11
    12a0:	72 8b       	std	Z+18, r23	; 0x12
    12a2:	83 8b       	std	Z+19, r24	; 0x13
    12a4:	94 8b       	std	Z+20, r25	; 0x14
		 Pntr->_D=Pntr->_kd*(Pntr->_Error[0]-Pntr->_Error[1])/Pntr->_Delta_t;//parte derivatica
    12a6:	25 a1       	ldd	r18, Z+37	; 0x25
    12a8:	36 a1       	ldd	r19, Z+38	; 0x26
    12aa:	47 a1       	ldd	r20, Z+39	; 0x27
    12ac:	50 a5       	ldd	r21, Z+40	; 0x28
    12ae:	c7 01       	movw	r24, r14
    12b0:	b6 01       	movw	r22, r12
    12b2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
    12b6:	a9 85       	ldd	r26, Y+9	; 0x09
    12b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    12ba:	19 96       	adiw	r26, 0x09	; 9
    12bc:	2d 91       	ld	r18, X+
    12be:	3d 91       	ld	r19, X+
    12c0:	4d 91       	ld	r20, X+
    12c2:	5c 91       	ld	r21, X
    12c4:	1c 97       	sbiw	r26, 0x0c	; 12
    12c6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    12ca:	a3 01       	movw	r20, r6
    12cc:	92 01       	movw	r18, r4
    12ce:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
    12d2:	2b 01       	movw	r4, r22
    12d4:	3c 01       	movw	r6, r24
    12d6:	e9 85       	ldd	r30, Y+9	; 0x09
    12d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12da:	65 8b       	std	Z+21, r22	; 0x15
    12dc:	76 8b       	std	Z+22, r23	; 0x16
    12de:	87 8b       	std	Z+23, r24	; 0x17
    12e0:	90 8f       	std	Z+24, r25	; 0x18
		 Pntr->_Error[1]=Pntr->_Error[0];
    12e2:	c5 a2       	std	Z+37, r12	; 0x25
    12e4:	d6 a2       	std	Z+38, r13	; 0x26
    12e6:	e7 a2       	std	Z+39, r14	; 0x27
    12e8:	f0 a6       	std	Z+40, r15	; 0x28
		 /*salida_CONTROL*/
		 Pntr->_U=Pntr->_P + Pntr->_I + Pntr->_D;
    12ea:	29 81       	ldd	r18, Y+1	; 0x01
    12ec:	3a 81       	ldd	r19, Y+2	; 0x02
    12ee:	4b 81       	ldd	r20, Y+3	; 0x03
    12f0:	5c 81       	ldd	r21, Y+4	; 0x04
    12f2:	c5 01       	movw	r24, r10
    12f4:	b4 01       	movw	r22, r8
    12f6:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    12fa:	a3 01       	movw	r20, r6
    12fc:	92 01       	movw	r18, r4
    12fe:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    1302:	f6 2e       	mov	r15, r22
    1304:	e7 2e       	mov	r14, r23
    1306:	d8 2e       	mov	r13, r24
    1308:	c9 2e       	mov	r12, r25
    130a:	86 2f       	mov	r24, r22
    130c:	9e 2d       	mov	r25, r14
    130e:	ad 2d       	mov	r26, r13
    1310:	bc 2d       	mov	r27, r12
    1312:	e9 85       	ldd	r30, Y+9	; 0x09
    1314:	fa 85       	ldd	r31, Y+10	; 0x0a
    1316:	85 a7       	std	Z+45, r24	; 0x2d
    1318:	96 a7       	std	Z+46, r25	; 0x2e
    131a:	a7 a7       	std	Z+47, r26	; 0x2f
    131c:	b0 ab       	std	Z+48, r27	; 0x30
		 _PWM=Pntr->_U;
		 //Limita la salida al maximo del PWM
		 if (Pntr->_U > Pntr->_PWM_MAX)
    131e:	91 a8       	ldd	r9, Z+49	; 0x31
    1320:	a9 2c       	mov	r10, r9
    1322:	b1 2c       	mov	r11, r1
    1324:	b5 01       	movw	r22, r10
    1326:	0b 2c       	mov	r0, r11
    1328:	00 0c       	add	r0, r0
    132a:	88 0b       	sbc	r24, r24
    132c:	99 0b       	sbc	r25, r25
    132e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__floatsisf>
    1332:	9b 01       	movw	r18, r22
    1334:	ac 01       	movw	r20, r24
    1336:	6f 2d       	mov	r22, r15
    1338:	7e 2d       	mov	r23, r14
    133a:	8d 2d       	mov	r24, r13
    133c:	9c 2d       	mov	r25, r12
    133e:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
    1342:	18 16       	cp	r1, r24
    1344:	5c f4       	brge	.+22     	; 0x135c <Implementar_PID+0x1a2>
		 {
			 _PWM=Pntr->_PWM_MAX;
    1346:	69 2d       	mov	r22, r9
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__floatunsisf>
    1352:	f6 2e       	mov	r15, r22
    1354:	e7 2e       	mov	r14, r23
    1356:	d8 2e       	mov	r13, r24
    1358:	c9 2e       	mov	r12, r25
    135a:	1e c0       	rjmp	.+60     	; 0x1398 <Implementar_PID+0x1de>
		 }else if(Pntr->_U < -Pntr->_PWM_MAX){
    135c:	66 27       	eor	r22, r22
    135e:	77 27       	eor	r23, r23
    1360:	6a 19       	sub	r22, r10
    1362:	7b 09       	sbc	r23, r11
    1364:	07 2e       	mov	r0, r23
    1366:	00 0c       	add	r0, r0
    1368:	88 0b       	sbc	r24, r24
    136a:	99 0b       	sbc	r25, r25
    136c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__floatsisf>
    1370:	86 2e       	mov	r8, r22
    1372:	97 2e       	mov	r9, r23
    1374:	a8 2e       	mov	r10, r24
    1376:	b9 2e       	mov	r11, r25
    1378:	26 2f       	mov	r18, r22
    137a:	37 2f       	mov	r19, r23
    137c:	48 2f       	mov	r20, r24
    137e:	59 2f       	mov	r21, r25
    1380:	6f 2d       	mov	r22, r15
    1382:	7e 2d       	mov	r23, r14
    1384:	8d 2d       	mov	r24, r13
    1386:	9c 2d       	mov	r25, r12
    1388:	0e 94 46 10 	call	0x208c	; 0x208c <__cmpsf2>
    138c:	88 23       	and	r24, r24
    138e:	24 f4       	brge	.+8      	; 0x1398 <Implementar_PID+0x1de>
			 _PWM=-Pntr->_PWM_MAX;
    1390:	f8 2c       	mov	r15, r8
    1392:	e9 2c       	mov	r14, r9
    1394:	da 2c       	mov	r13, r10
    1396:	cb 2c       	mov	r12, r11
		 }
		 //En este SISTEMA si la salida es positiva se envia al PWM, caso contrario se apaga la caldera.
		if (_PWM >= 0)
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	a9 01       	movw	r20, r18
    139e:	6f 2d       	mov	r22, r15
    13a0:	7e 2d       	mov	r23, r14
    13a2:	8d 2d       	mov	r24, r13
    13a4:	9c 2d       	mov	r25, r12
    13a6:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
    13aa:	88 23       	and	r24, r24
    13ac:	54 f0       	brlt	.+20     	; 0x13c2 <Implementar_PID+0x208>
		{
			PWM_CALDERA=round(_PWM);
    13ae:	6f 2d       	mov	r22, r15
    13b0:	7e 2d       	mov	r23, r14
    13b2:	8d 2d       	mov	r24, r13
    13b4:	9c 2d       	mov	r25, r12
    13b6:	0e 94 10 12 	call	0x2420	; 0x2420 <round>
    13ba:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
    13be:	67 bd       	out	0x27, r22	; 39
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <Implementar_PID+0x20a>
		}else{
			PWM_CALDERA=0;
    13c2:	17 bc       	out	0x27, r1	; 39
		}
		Pntr->_U_sat=round(_PWM);
    13c4:	6f 2d       	mov	r22, r15
    13c6:	7e 2d       	mov	r23, r14
    13c8:	8d 2d       	mov	r24, r13
    13ca:	9c 2d       	mov	r25, r12
    13cc:	0e 94 10 12 	call	0x2420	; 0x2420 <round>
    13d0:	9b 01       	movw	r18, r22
    13d2:	ac 01       	movw	r20, r24
    13d4:	e9 85       	ldd	r30, Y+9	; 0x09
    13d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    13d8:	ed 5b       	subi	r30, 0xBD	; 189
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	60 83       	st	Z, r22
    13de:	71 83       	std	Z+1, r23	; 0x01
    13e0:	82 83       	std	Z+2, r24	; 0x02
    13e2:	93 83       	std	Z+3, r25	; 0x03
		 /*
		 Antireset Windup back calculation
		 */
		 Pntr->_Error_sat=Pntr->_U-Pntr->_U_sat;
    13e4:	a9 85       	ldd	r26, Y+9	; 0x09
    13e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    13e8:	9d 96       	adiw	r26, 0x2d	; 45
    13ea:	6d 91       	ld	r22, X+
    13ec:	7d 91       	ld	r23, X+
    13ee:	8d 91       	ld	r24, X+
    13f0:	9c 91       	ld	r25, X
    13f2:	d0 97       	sbiw	r26, 0x30	; 48
    13f4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	e9 85       	ldd	r30, Y+9	; 0x09
    13fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    1400:	ff 96       	adiw	r30, 0x3f	; 63
    1402:	60 83       	st	Z, r22
    1404:	71 83       	std	Z+1, r23	; 0x01
    1406:	82 83       	std	Z+2, r24	; 0x02
    1408:	93 83       	std	Z+3, r25	; 0x03
		 Pntr->_Anti_windup=Pntr->_Error_sat*Pntr->_ka;
    140a:	e9 85       	ldd	r30, Y+9	; 0x09
    140c:	fa 85       	ldd	r31, Y+10	; 0x0a
    140e:	63 ad       	ldd	r22, Z+59	; 0x3b
    1410:	74 ad       	ldd	r23, Z+60	; 0x3c
    1412:	85 ad       	ldd	r24, Z+61	; 0x3d
    1414:	96 ad       	ldd	r25, Z+62	; 0x3e
    1416:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    141a:	a9 85       	ldd	r26, Y+9	; 0x09
    141c:	ba 85       	ldd	r27, Y+10	; 0x0a
    141e:	d7 96       	adiw	r26, 0x37	; 55
    1420:	6d 93       	st	X+, r22
    1422:	7d 93       	st	X+, r23
    1424:	8d 93       	st	X+, r24
    1426:	9c 93       	st	X, r25
    1428:	da 97       	sbiw	r26, 0x3a	; 58
    142a:	ff c0       	rjmp	.+510    	; 0x162a <Implementar_PID+0x470>

	 }else{//modo Incremental
		Pntr->_P=Pntr->_kp*(Pntr->_Error[0]-Pntr->_Error[1]);
    142c:	a9 85       	ldd	r26, Y+9	; 0x09
    142e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1430:	95 96       	adiw	r26, 0x25	; 37
    1432:	8d 91       	ld	r24, X+
    1434:	9d 91       	ld	r25, X+
    1436:	0d 90       	ld	r0, X+
    1438:	bc 91       	ld	r27, X
    143a:	a0 2d       	mov	r26, r0
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	ab 83       	std	Y+3, r26	; 0x03
    1442:	bc 83       	std	Y+4, r27	; 0x04
    1444:	9c 01       	movw	r18, r24
    1446:	ad 01       	movw	r20, r26
    1448:	c7 01       	movw	r24, r14
    144a:	b6 01       	movw	r22, r12
    144c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
    1450:	e9 85       	ldd	r30, Y+9	; 0x09
    1452:	fa 85       	ldd	r31, Y+10	; 0x0a
    1454:	21 81       	ldd	r18, Z+1	; 0x01
    1456:	32 81       	ldd	r19, Z+2	; 0x02
    1458:	43 81       	ldd	r20, Z+3	; 0x03
    145a:	54 81       	ldd	r21, Z+4	; 0x04
    145c:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1460:	4b 01       	movw	r8, r22
    1462:	5c 01       	movw	r10, r24
    1464:	a9 85       	ldd	r26, Y+9	; 0x09
    1466:	ba 85       	ldd	r27, Y+10	; 0x0a
    1468:	1d 96       	adiw	r26, 0x0d	; 13
    146a:	6d 93       	st	X+, r22
    146c:	7d 93       	st	X+, r23
    146e:	8d 93       	st	X+, r24
    1470:	9c 93       	st	X, r25
    1472:	50 97       	sbiw	r26, 0x10	; 16
		Pntr->_I=Pntr->_ki*Pntr->_Error[0]*Pntr->_Delta_t;
    1474:	d3 96       	adiw	r26, 0x33	; 51
    1476:	4d 90       	ld	r4, X+
    1478:	5d 90       	ld	r5, X+
    147a:	6d 90       	ld	r6, X+
    147c:	7c 90       	ld	r7, X
    147e:	d6 97       	sbiw	r26, 0x36	; 54
    1480:	15 96       	adiw	r26, 0x05	; 5
    1482:	2d 91       	ld	r18, X+
    1484:	3d 91       	ld	r19, X+
    1486:	4d 91       	ld	r20, X+
    1488:	5c 91       	ld	r21, X
    148a:	18 97       	sbiw	r26, 0x08	; 8
    148c:	c7 01       	movw	r24, r14
    148e:	b6 01       	movw	r22, r12
    1490:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1494:	a3 01       	movw	r20, r6
    1496:	92 01       	movw	r18, r4
    1498:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    149c:	6d 83       	std	Y+5, r22	; 0x05
    149e:	7e 83       	std	Y+6, r23	; 0x06
    14a0:	8f 83       	std	Y+7, r24	; 0x07
    14a2:	98 87       	std	Y+8, r25	; 0x08
    14a4:	e9 85       	ldd	r30, Y+9	; 0x09
    14a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    14a8:	61 8b       	std	Z+17, r22	; 0x11
    14aa:	72 8b       	std	Z+18, r23	; 0x12
    14ac:	83 8b       	std	Z+19, r24	; 0x13
    14ae:	94 8b       	std	Z+20, r25	; 0x14
		Pntr->_D=(Pntr->_kd*(Pntr->_Error[0]-2*Pntr->_Error[1]+Pntr->_Error[2]))/Pntr->_Delta_t;
    14b0:	29 81       	ldd	r18, Y+1	; 0x01
    14b2:	3a 81       	ldd	r19, Y+2	; 0x02
    14b4:	4b 81       	ldd	r20, Y+3	; 0x03
    14b6:	5c 81       	ldd	r21, Y+4	; 0x04
    14b8:	ca 01       	movw	r24, r20
    14ba:	b9 01       	movw	r22, r18
    14bc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    14c0:	9b 01       	movw	r18, r22
    14c2:	ac 01       	movw	r20, r24
    14c4:	c7 01       	movw	r24, r14
    14c6:	b6 01       	movw	r22, r12
    14c8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__subsf3>
    14cc:	a9 85       	ldd	r26, Y+9	; 0x09
    14ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    14d0:	99 96       	adiw	r26, 0x29	; 41
    14d2:	2d 91       	ld	r18, X+
    14d4:	3d 91       	ld	r19, X+
    14d6:	4d 91       	ld	r20, X+
    14d8:	5c 91       	ld	r21, X
    14da:	9c 97       	sbiw	r26, 0x2c	; 44
    14dc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    14e0:	e9 85       	ldd	r30, Y+9	; 0x09
    14e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    14e4:	21 85       	ldd	r18, Z+9	; 0x09
    14e6:	32 85       	ldd	r19, Z+10	; 0x0a
    14e8:	43 85       	ldd	r20, Z+11	; 0x0b
    14ea:	54 85       	ldd	r21, Z+12	; 0x0c
    14ec:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    14f0:	a3 01       	movw	r20, r6
    14f2:	92 01       	movw	r18, r4
    14f4:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
    14f8:	2b 01       	movw	r4, r22
    14fa:	3c 01       	movw	r6, r24
    14fc:	a9 85       	ldd	r26, Y+9	; 0x09
    14fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    1500:	55 96       	adiw	r26, 0x15	; 21
    1502:	6d 93       	st	X+, r22
    1504:	7d 93       	st	X+, r23
    1506:	8d 93       	st	X+, r24
    1508:	9c 93       	st	X, r25
    150a:	58 97       	sbiw	r26, 0x18	; 24
		//Salida incremental
		Pntr->_U+=Pntr->_P+Pntr->_I+Pntr->_D;
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	4f 81       	ldd	r20, Y+7	; 0x07
    1512:	58 85       	ldd	r21, Y+8	; 0x08
    1514:	c5 01       	movw	r24, r10
    1516:	b4 01       	movw	r22, r8
    1518:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    151c:	a3 01       	movw	r20, r6
    151e:	92 01       	movw	r18, r4
    1520:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    1524:	e9 85       	ldd	r30, Y+9	; 0x09
    1526:	fa 85       	ldd	r31, Y+10	; 0x0a
    1528:	25 a5       	ldd	r18, Z+45	; 0x2d
    152a:	36 a5       	ldd	r19, Z+46	; 0x2e
    152c:	47 a5       	ldd	r20, Z+47	; 0x2f
    152e:	50 a9       	ldd	r21, Z+48	; 0x30
    1530:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__addsf3>
    1534:	b6 2e       	mov	r11, r22
    1536:	a7 2e       	mov	r10, r23
    1538:	98 2e       	mov	r9, r24
    153a:	89 2e       	mov	r8, r25
    153c:	86 2f       	mov	r24, r22
    153e:	9a 2d       	mov	r25, r10
    1540:	a9 2d       	mov	r26, r9
    1542:	b8 2d       	mov	r27, r8
    1544:	e9 85       	ldd	r30, Y+9	; 0x09
    1546:	fa 85       	ldd	r31, Y+10	; 0x0a
    1548:	85 a7       	std	Z+45, r24	; 0x2d
    154a:	96 a7       	std	Z+46, r25	; 0x2e
    154c:	a7 a7       	std	Z+47, r26	; 0x2f
    154e:	b0 ab       	std	Z+48, r27	; 0x30
		//Desplazamos el error
		Pntr->_Error[2]=Pntr->_Error[1];
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	ab 81       	ldd	r26, Y+3	; 0x03
    1556:	bc 81       	ldd	r27, Y+4	; 0x04
    1558:	81 a7       	std	Z+41, r24	; 0x29
    155a:	92 a7       	std	Z+42, r25	; 0x2a
    155c:	a3 a7       	std	Z+43, r26	; 0x2b
    155e:	b4 a7       	std	Z+44, r27	; 0x2c
		Pntr->_Error[1]=Pntr->_Error[0];
    1560:	c5 a2       	std	Z+37, r12	; 0x25
    1562:	d6 a2       	std	Z+38, r13	; 0x26
    1564:	e7 a2       	std	Z+39, r14	; 0x27
    1566:	f0 a6       	std	Z+40, r15	; 0x28

		_PWM=Pntr->_U;
		//Limita la salida al maximo del PWM
		if (Pntr->_U > Pntr->_PWM_MAX)
    1568:	d1 a8       	ldd	r13, Z+49	; 0x31
    156a:	ed 2c       	mov	r14, r13
    156c:	f1 2c       	mov	r15, r1
    156e:	b7 01       	movw	r22, r14
    1570:	0f 2c       	mov	r0, r15
    1572:	00 0c       	add	r0, r0
    1574:	88 0b       	sbc	r24, r24
    1576:	99 0b       	sbc	r25, r25
    1578:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__floatsisf>
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	6b 2d       	mov	r22, r11
    1582:	7a 2d       	mov	r23, r10
    1584:	89 2d       	mov	r24, r9
    1586:	98 2d       	mov	r25, r8
    1588:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
    158c:	18 16       	cp	r1, r24
    158e:	5c f4       	brge	.+22     	; 0x15a6 <Implementar_PID+0x3ec>
		{
			_PWM=Pntr->_PWM_MAX;
    1590:	6d 2d       	mov	r22, r13
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__floatunsisf>
    159c:	b6 2e       	mov	r11, r22
    159e:	a7 2e       	mov	r10, r23
    15a0:	98 2e       	mov	r9, r24
    15a2:	89 2e       	mov	r8, r25
    15a4:	1e c0       	rjmp	.+60     	; 0x15e2 <Implementar_PID+0x428>
			}else if(Pntr->_U < -Pntr->_PWM_MAX){
    15a6:	66 27       	eor	r22, r22
    15a8:	77 27       	eor	r23, r23
    15aa:	6e 19       	sub	r22, r14
    15ac:	7f 09       	sbc	r23, r15
    15ae:	07 2e       	mov	r0, r23
    15b0:	00 0c       	add	r0, r0
    15b2:	88 0b       	sbc	r24, r24
    15b4:	99 0b       	sbc	r25, r25
    15b6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__floatsisf>
    15ba:	c6 2e       	mov	r12, r22
    15bc:	d7 2e       	mov	r13, r23
    15be:	e8 2e       	mov	r14, r24
    15c0:	f9 2e       	mov	r15, r25
    15c2:	26 2f       	mov	r18, r22
    15c4:	37 2f       	mov	r19, r23
    15c6:	48 2f       	mov	r20, r24
    15c8:	59 2f       	mov	r21, r25
    15ca:	6b 2d       	mov	r22, r11
    15cc:	7a 2d       	mov	r23, r10
    15ce:	89 2d       	mov	r24, r9
    15d0:	98 2d       	mov	r25, r8
    15d2:	0e 94 46 10 	call	0x208c	; 0x208c <__cmpsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	24 f4       	brge	.+8      	; 0x15e2 <Implementar_PID+0x428>
			_PWM=-Pntr->_PWM_MAX;
    15da:	bc 2c       	mov	r11, r12
    15dc:	ad 2c       	mov	r10, r13
    15de:	9e 2c       	mov	r9, r14
    15e0:	8f 2c       	mov	r8, r15
		}
		//En este SISTEMA si la salida es positiva se envia al PWM, caso contrario se apaga la caldera.
		if (_PWM >= 0)
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	a9 01       	movw	r20, r18
    15e8:	6b 2d       	mov	r22, r11
    15ea:	7a 2d       	mov	r23, r10
    15ec:	89 2d       	mov	r24, r9
    15ee:	98 2d       	mov	r25, r8
    15f0:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
    15f4:	88 23       	and	r24, r24
    15f6:	54 f0       	brlt	.+20     	; 0x160c <Implementar_PID+0x452>
		{
			PWM_CALDERA=round(_PWM);
    15f8:	6b 2d       	mov	r22, r11
    15fa:	7a 2d       	mov	r23, r10
    15fc:	89 2d       	mov	r24, r9
    15fe:	98 2d       	mov	r25, r8
    1600:	0e 94 10 12 	call	0x2420	; 0x2420 <round>
    1604:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
    1608:	67 bd       	out	0x27, r22	; 39
    160a:	01 c0       	rjmp	.+2      	; 0x160e <Implementar_PID+0x454>
			}else{
			PWM_CALDERA=0;
    160c:	17 bc       	out	0x27, r1	; 39
		}
		Pntr->_U_sat=round(_PWM);
    160e:	6b 2d       	mov	r22, r11
    1610:	7a 2d       	mov	r23, r10
    1612:	89 2d       	mov	r24, r9
    1614:	98 2d       	mov	r25, r8
    1616:	0e 94 10 12 	call	0x2420	; 0x2420 <round>
    161a:	e9 85       	ldd	r30, Y+9	; 0x09
    161c:	fa 85       	ldd	r31, Y+10	; 0x0a
    161e:	ed 5b       	subi	r30, 0xBD	; 189
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 83       	st	Z, r22
    1624:	71 83       	std	Z+1, r23	; 0x01
    1626:	82 83       	std	Z+2, r24	; 0x02
    1628:	93 83       	std	Z+3, r25	; 0x03
	 }
}
    162a:	2a 96       	adiw	r28, 0x0a	; 10
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	af 90       	pop	r10
    1646:	9f 90       	pop	r9
    1648:	8f 90       	pop	r8
    164a:	7f 90       	pop	r7
    164c:	6f 90       	pop	r6
    164e:	5f 90       	pop	r5
    1650:	4f 90       	pop	r4
    1652:	08 95       	ret

00001654 <EjecutarPID>:
	Env_Usart(USART0,cadena);
}
/*
*/
void EjecutarPID(){
	Implementar_PID(&PID_Caldera,TermoK._TerTempC);
    1654:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <TermoK+0x7>
    1658:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <TermoK+0x8>
    165c:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <TermoK+0x9>
    1660:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <TermoK+0xa>
    1664:	88 e1       	ldi	r24, 0x18	; 24
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Implementar_PID>
    166c:	08 95       	ret

0000166e <Inicia_Usart>:
		//return UDR1;//devuelve el caracter que ha llegado por el puerto RX*/
		//break;
		default:
		return 0;
	}
}
    166e:	51 9a       	sbi	0x0a, 1	; 10
    1670:	50 98       	cbi	0x0a, 0	; 10
    1672:	81 11       	cpse	r24, r1
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <Inicia_Usart+0x22>
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    167c:	88 e1       	ldi	r24, 0x18	; 24
    167e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1682:	86 e0       	ldi	r24, 0x06	; 6
    1684:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1688:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    168c:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1690:	08 95       	ret

00001692 <Env_Usart>:
*
*	Parametros: STR, que es la cadena o simbolo a ser enviado por medio de USART
*
*	Descripcion: Esta funcion envia una cadena o carater por medio del pin Tx de USART
****************************************************************************************/
void Env_Usart(unsigned char nserial,char *STR){
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
	//unsigned int conteo=0;
	switch(nserial){
    1696:	81 11       	cpse	r24, r1
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <Env_Usart+0x2a>
		case 0:
		while (*STR!='\0')
    169a:	fb 01       	movw	r30, r22
    169c:	90 81       	ld	r25, Z
    169e:	99 23       	and	r25, r25
    16a0:	69 f0       	breq	.+26     	; 0x16bc <Env_Usart+0x2a>
    16a2:	db 01       	movw	r26, r22
    16a4:	11 96       	adiw	r26, 0x01	; 1
		{
			while(!(UCSR0A & (1<<UDRE0)));//espera a que el dato enviado sea recibido antes de enviar otro
    16a6:	e0 ec       	ldi	r30, 0xC0	; 192
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0=*STR++;//enviando la cadena dat
    16aa:	c6 ec       	ldi	r28, 0xC6	; 198
    16ac:	d0 e0       	ldi	r29, 0x00	; 0
	//unsigned int conteo=0;
	switch(nserial){
		case 0:
		while (*STR!='\0')
		{
			while(!(UCSR0A & (1<<UDRE0)));//espera a que el dato enviado sea recibido antes de enviar otro
    16ae:	80 81       	ld	r24, Z
    16b0:	85 ff       	sbrs	r24, 5
    16b2:	fd cf       	rjmp	.-6      	; 0x16ae <Env_Usart+0x1c>
			UDR0=*STR++;//enviando la cadena dat
    16b4:	98 83       	st	Y, r25
****************************************************************************************/
void Env_Usart(unsigned char nserial,char *STR){
	//unsigned int conteo=0;
	switch(nserial){
		case 0:
		while (*STR!='\0')
    16b6:	9d 91       	ld	r25, X+
    16b8:	91 11       	cpse	r25, r1
    16ba:	f9 cf       	rjmp	.-14     	; 0x16ae <Env_Usart+0x1c>
			while(!(UCSR1A & (1<<UDRE1)));//espera a que el dato enviado sea recibido antes de enviar otro
			UDR1=*STR++;//enviando la cadena dat
		}*/
		break;
	}
}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <Env_Usart_P>:
/*

*/
void Env_Usart_P(unsigned char nserial,const char *STR){
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
	//unsigned int conteo=0;
	switch(nserial){
    16c6:	81 11       	cpse	r24, r1
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <Env_Usart_P+0x30>
		case 0:
		while (pgm_read_byte(STR)!='\0')
    16ca:	fb 01       	movw	r30, r22
    16cc:	84 91       	lpm	r24, Z
    16ce:	88 23       	and	r24, r24
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <Env_Usart_P+0x30>
		{
			while(!(UCSR0A & (1<<UDRE0)));//espera a que el dato enviado sea recibido antes de enviar otro
    16d2:	a0 ec       	ldi	r26, 0xC0	; 192
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
			UDR0=pgm_read_byte(STR++);//enviando la cadena dat
    16d6:	c6 ec       	ldi	r28, 0xC6	; 198
    16d8:	d0 e0       	ldi	r29, 0x00	; 0
    16da:	fb 01       	movw	r30, r22
	//unsigned int conteo=0;
	switch(nserial){
		case 0:
		while (pgm_read_byte(STR)!='\0')
		{
			while(!(UCSR0A & (1<<UDRE0)));//espera a que el dato enviado sea recibido antes de enviar otro
    16dc:	8c 91       	ld	r24, X
    16de:	85 ff       	sbrs	r24, 5
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <Env_Usart_P+0x1a>
			UDR0=pgm_read_byte(STR++);//enviando la cadena dat
    16e2:	6f 5f       	subi	r22, 0xFF	; 255
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	e4 91       	lpm	r30, Z
    16e8:	e8 83       	st	Y, r30
*/
void Env_Usart_P(unsigned char nserial,const char *STR){
	//unsigned int conteo=0;
	switch(nserial){
		case 0:
		while (pgm_read_byte(STR)!='\0')
    16ea:	fb 01       	movw	r30, r22
    16ec:	84 91       	lpm	r24, Z
    16ee:	81 11       	cpse	r24, r1
    16f0:	f4 cf       	rjmp	.-24     	; 0x16da <Env_Usart_P+0x18>
			while(!(UCSR1A & (1<<UDRE1)));//espera a que el dato enviado sea recibido antes de enviar otro
			UDR1=pgm_read_byte(STR++);//enviando la cadena dat
		}*/
		break;
	}
}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <GLCD_Send>:
		width += GLCD_GetWidthChar(r);
		r = pgm_read_byte(Text++);
	}
	
	return width;
}
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	c8 2f       	mov	r28, r24
    1706:	7b 01       	movw	r14, r22
    1708:	14 2f       	mov	r17, r20
    170a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TWI_BeginTransmission>
    170e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <TWI_Status>
    1712:	88 30       	cpi	r24, 0x08	; 8
    1714:	31 f0       	breq	.+12     	; 0x1722 <GLCD_Send+0x2a>
    1716:	80 31       	cpi	r24, 0x10	; 16
    1718:	21 f0       	breq	.+8      	; 0x1722 <GLCD_Send+0x2a>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__GLCD>
    1720:	33 c0       	rjmp	.+102    	; 0x1788 <GLCD_Send+0x90>
    1722:	88 e7       	ldi	r24, 0x78	; 120
    1724:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_Transmit>
    1728:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <TWI_Status>
    172c:	88 31       	cpi	r24, 0x18	; 24
    172e:	31 f0       	breq	.+12     	; 0x173c <GLCD_Send+0x44>
    1730:	80 32       	cpi	r24, 0x20	; 32
    1732:	21 f0       	breq	.+8      	; 0x173c <GLCD_Send+0x44>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__GLCD>
    173a:	26 c0       	rjmp	.+76     	; 0x1788 <GLCD_Send+0x90>
    173c:	8c 2f       	mov	r24, r28
    173e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_Transmit>
    1742:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <TWI_Status>
    1746:	88 32       	cpi	r24, 0x28	; 40
    1748:	19 f4       	brne	.+6      	; 0x1750 <GLCD_Send+0x58>
    174a:	11 11       	cpse	r17, r1
    174c:	07 c0       	rjmp	.+14     	; 0x175c <GLCD_Send+0x64>
    174e:	1a c0       	rjmp	.+52     	; 0x1784 <GLCD_Send+0x8c>
    1750:	80 33       	cpi	r24, 0x30	; 48
    1752:	d9 f3       	breq	.-10     	; 0x174a <GLCD_Send+0x52>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__GLCD>
    175a:	16 c0       	rjmp	.+44     	; 0x1788 <GLCD_Send+0x90>
    175c:	e7 01       	movw	r28, r14
    175e:	11 50       	subi	r17, 0x01	; 1
    1760:	01 2f       	mov	r16, r17
    1762:	10 e0       	ldi	r17, 0x00	; 0
    1764:	0f 5f       	subi	r16, 0xFF	; 255
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	0e 0d       	add	r16, r14
    176a:	1f 1d       	adc	r17, r15
    176c:	89 91       	ld	r24, Y+
    176e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_Transmit>
    1772:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <TWI_Status>
    1776:	88 32       	cpi	r24, 0x28	; 40
    1778:	11 f0       	breq	.+4      	; 0x177e <GLCD_Send+0x86>
    177a:	80 33       	cpi	r24, 0x30	; 48
    177c:	19 f4       	brne	.+6      	; 0x1784 <GLCD_Send+0x8c>
    177e:	c0 17       	cp	r28, r16
    1780:	d1 07       	cpc	r29, r17
    1782:	a1 f7       	brne	.-24     	; 0x176c <GLCD_Send+0x74>
    1784:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__GLCD>
    1788:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_EndTransmission>
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	08 95       	ret

0000179a <GLCD_SendCommand>:
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	1f 92       	push	r1
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	be 01       	movw	r22, r28
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GLCD_Send>
    17b4:	0f 90       	pop	r0
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <GLCD_Render>:
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	81 e2       	ldi	r24, 0x21	; 33
    17c2:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    17cc:	8f e7       	ldi	r24, 0x7F	; 127
    17ce:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    17d2:	82 e2       	ldi	r24, 0x22	; 34
    17d4:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    17de:	87 e0       	ldi	r24, 0x07	; 7
    17e0:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    17e4:	c0 e0       	ldi	r28, 0x00	; 0
    17e6:	d0 e0       	ldi	r29, 0x00	; 0
    17e8:	be 01       	movw	r22, r28
    17ea:	62 95       	swap	r22
    17ec:	72 95       	swap	r23
    17ee:	70 7f       	andi	r23, 0xF0	; 240
    17f0:	76 27       	eor	r23, r22
    17f2:	60 7f       	andi	r22, 0xF0	; 240
    17f4:	76 27       	eor	r23, r22
    17f6:	60 58       	subi	r22, 0x80	; 128
    17f8:	7e 4f       	sbci	r23, 0xFE	; 254
    17fa:	40 e1       	ldi	r20, 0x10	; 16
    17fc:	80 e4       	ldi	r24, 0x40	; 64
    17fe:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GLCD_Send>
    1802:	21 96       	adiw	r28, 0x01	; 1
    1804:	c0 34       	cpi	r28, 0x40	; 64
    1806:	d1 05       	cpc	r29, r1
    1808:	79 f7       	brne	.-34     	; 0x17e8 <GLCD_Render+0x2c>
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <GLCD_GotoX>:
    1810:	88 23       	and	r24, r24
    1812:	14 f0       	brlt	.+4      	; 0x1818 <GLCD_GotoX+0x8>
    1814:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <__GLCD+0x1>
    1818:	08 95       	ret

0000181a <GLCD_GotoY>:
    181a:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <__GLCD+0x2>
    181e:	90 34       	cpi	r25, 0x40	; 64
    1820:	10 f4       	brcc	.+4      	; 0x1826 <GLCD_GotoY+0xc>
    1822:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__GLCD+0x2>
    1826:	08 95       	ret

00001828 <GLCD_GotoXY>:
    1828:	cf 93       	push	r28
    182a:	c6 2f       	mov	r28, r22
    182c:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_GotoX>
    1830:	8c 2f       	mov	r24, r28
    1832:	0e 94 0d 0c 	call	0x181a	; 0x181a <GLCD_GotoY>
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <GLCD_Setup>:
    183a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_Setup>
    183e:	8e ea       	ldi	r24, 0xAE	; 174
    1840:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1844:	85 ed       	ldi	r24, 0xD5	; 213
    1846:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    184a:	80 ef       	ldi	r24, 0xF0	; 240
    184c:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1850:	88 ea       	ldi	r24, 0xA8	; 168
    1852:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1856:	8f e3       	ldi	r24, 0x3F	; 63
    1858:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    185c:	83 ed       	ldi	r24, 0xD3	; 211
    185e:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1868:	8d e8       	ldi	r24, 0x8D	; 141
    186a:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    186e:	84 e1       	ldi	r24, 0x14	; 20
    1870:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1874:	80 e4       	ldi	r24, 0x40	; 64
    1876:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1886:	81 ea       	ldi	r24, 0xA1	; 161
    1888:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1892:	8a ed       	ldi	r24, 0xDA	; 218
    1894:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    1898:	82 e1       	ldi	r24, 0x12	; 18
    189a:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    189e:	81 e8       	ldi	r24, 0x81	; 129
    18a0:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18aa:	89 ed       	ldi	r24, 0xD9	; 217
    18ac:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18b0:	81 ef       	ldi	r24, 0xF1	; 241
    18b2:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18b6:	8b ed       	ldi	r24, 0xDB	; 219
    18b8:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18c2:	84 ea       	ldi	r24, 0xA4	; 164
    18c4:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18c8:	86 ea       	ldi	r24, 0xA6	; 166
    18ca:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18ce:	8e e2       	ldi	r24, 0x2E	; 46
    18d0:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18d4:	8f ea       	ldi	r24, 0xAF	; 175
    18d6:	0e 94 cd 0b 	call	0x179a	; 0x179a <GLCD_SendCommand>
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
    18e2:	e6 e7       	ldi	r30, 0x76	; 118
    18e4:	f1 e0       	ldi	r31, 0x01	; 1
    18e6:	86 ea       	ldi	r24, 0xA6	; 166
    18e8:	83 83       	std	Z+3, r24	; 0x03
    18ea:	10 86       	std	Z+8, r1	; 0x08
    18ec:	17 82       	std	Z+7, r1	; 0x07
    18ee:	16 82       	std	Z+6, r1	; 0x06
    18f0:	12 82       	std	Z+2, r1	; 0x02
    18f2:	11 82       	std	Z+1, r1	; 0x01
    18f4:	08 95       	ret

000018f6 <GLCD_SetPixel>:
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	c6 2f       	mov	r28, r22
    18fc:	d4 2f       	mov	r29, r20
    18fe:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
    1902:	e6 e7       	ldi	r30, 0x76	; 118
    1904:	f1 e0       	ldi	r31, 0x01	; 1
    1906:	22 81       	ldd	r18, Z+2	; 0x02
    1908:	26 95       	lsr	r18
    190a:	26 95       	lsr	r18
    190c:	26 95       	lsr	r18
    190e:	81 81       	ldd	r24, Z+1	; 0x01
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	30 e8       	ldi	r19, 0x80	; 128
    1914:	23 9f       	mul	r18, r19
    1916:	80 0d       	add	r24, r0
    1918:	91 1d       	adc	r25, r1
    191a:	11 24       	eor	r1, r1
    191c:	fc 01       	movw	r30, r24
    191e:	e0 58       	subi	r30, 0x80	; 128
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	20 81       	ld	r18, Z
    1924:	df 3f       	cpi	r29, 0xFF	; 255
    1926:	71 f4       	brne	.+28     	; 0x1944 <GLCD_SetPixel+0x4e>
    1928:	c7 70       	andi	r28, 0x07	; 7
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	04 c0       	rjmp	.+8      	; 0x193c <GLCD_SetPixel+0x46>
    1934:	44 0f       	add	r20, r20
    1936:	55 1f       	adc	r21, r21
    1938:	66 1f       	adc	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	ca 95       	dec	r28
    193e:	d2 f7       	brpl	.-12     	; 0x1934 <GLCD_SetPixel+0x3e>
    1940:	42 2b       	or	r20, r18
    1942:	0e c0       	rjmp	.+28     	; 0x1960 <GLCD_SetPixel+0x6a>
    1944:	c7 70       	andi	r28, 0x07	; 7
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <GLCD_SetPixel+0x62>
    1950:	44 0f       	add	r20, r20
    1952:	55 1f       	adc	r21, r21
    1954:	66 1f       	adc	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	ca 95       	dec	r28
    195a:	d2 f7       	brpl	.-12     	; 0x1950 <GLCD_SetPixel+0x5a>
    195c:	40 95       	com	r20
    195e:	42 23       	and	r20, r18
    1960:	fc 01       	movw	r30, r24
    1962:	e0 58       	subi	r30, 0x80	; 128
    1964:	fe 4f       	sbci	r31, 0xFE	; 254
    1966:	40 83       	st	Z, r20
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <GLCD_SetPixels>:
    196e:	9f 92       	push	r9
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	88 23       	and	r24, r24
    1986:	0c f4       	brge	.+2      	; 0x198a <GLCD_SetPixels+0x1c>
    1988:	c0 c0       	rjmp	.+384    	; 0x1b0a <GLCD_SetPixels+0x19c>
    198a:	44 23       	and	r20, r20
    198c:	0c f4       	brge	.+2      	; 0x1990 <GLCD_SetPixels+0x22>
    198e:	bd c0       	rjmp	.+378    	; 0x1b0a <GLCD_SetPixels+0x19c>
    1990:	60 34       	cpi	r22, 0x40	; 64
    1992:	08 f0       	brcs	.+2      	; 0x1996 <GLCD_SetPixels+0x28>
    1994:	ba c0       	rjmp	.+372    	; 0x1b0a <GLCD_SetPixels+0x19c>
    1996:	20 34       	cpi	r18, 0x40	; 64
    1998:	08 f0       	brcs	.+2      	; 0x199c <GLCD_SetPixels+0x2e>
    199a:	b7 c0       	rjmp	.+366    	; 0x1b0a <GLCD_SetPixels+0x19c>
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	a2 2e       	mov	r10, r18
    19a0:	a6 1a       	sub	r10, r22
    19a2:	4f 5f       	subi	r20, 0xFF	; 255
    19a4:	d4 2e       	mov	r13, r20
    19a6:	d8 1a       	sub	r13, r24
    19a8:	96 2f       	mov	r25, r22
    19aa:	97 70       	andi	r25, 0x07	; 7
    19ac:	96 2e       	mov	r9, r22
    19ae:	99 1a       	sub	r9, r25
    19b0:	ea 2c       	mov	r14, r10
    19b2:	f1 2c       	mov	r15, r1
    19b4:	28 e0       	ldi	r18, 0x08	; 8
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	29 1b       	sub	r18, r25
    19ba:	31 09       	sbc	r19, r1
    19bc:	e2 16       	cp	r14, r18
    19be:	f3 06       	cpc	r15, r19
    19c0:	6c f4       	brge	.+26     	; 0x19dc <GLCD_SetPixels+0x6e>
    19c2:	28 e0       	ldi	r18, 0x08	; 8
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	2e 19       	sub	r18, r14
    19c8:	3f 09       	sbc	r19, r15
    19ca:	cf ef       	ldi	r28, 0xFF	; 255
    19cc:	d0 e0       	ldi	r29, 0x00	; 0
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GLCD_SetPixels+0x66>
    19d0:	d5 95       	asr	r29
    19d2:	c7 95       	ror	r28
    19d4:	2a 95       	dec	r18
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GLCD_SetPixels+0x62>
    19d8:	ba 2c       	mov	r11, r10
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <GLCD_SetPixels+0x76>
    19dc:	28 e0       	ldi	r18, 0x08	; 8
    19de:	b2 2e       	mov	r11, r18
    19e0:	b9 1a       	sub	r11, r25
    19e2:	cf ef       	ldi	r28, 0xFF	; 255
    19e4:	c8 2e       	mov	r12, r24
    19e6:	d0 e0       	ldi	r29, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GLCD_SetPixels+0x80>
    19ea:	cc 0f       	add	r28, r28
    19ec:	dd 1f       	adc	r29, r29
    19ee:	9a 95       	dec	r25
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GLCD_SetPixels+0x7c>
    19f2:	1c 2f       	mov	r17, r28
    19f4:	69 2d       	mov	r22, r9
    19f6:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
    19fa:	dd 20       	and	r13, r13
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <GLCD_SetPixels+0x92>
    19fe:	41 c0       	rjmp	.+130    	; 0x1a82 <GLCD_SetPixels+0x114>
    1a00:	e6 e7       	ldi	r30, 0x76	; 118
    1a02:	f1 e0       	ldi	r31, 0x01	; 1
    1a04:	21 81       	ldd	r18, Z+1	; 0x01
    1a06:	42 81       	ldd	r20, Z+2	; 0x02
    1a08:	46 95       	lsr	r20
    1a0a:	46 95       	lsr	r20
    1a0c:	46 95       	lsr	r20
    1a0e:	80 e8       	ldi	r24, 0x80	; 128
    1a10:	48 9f       	mul	r20, r24
    1a12:	a0 01       	movw	r20, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	6d 2d       	mov	r22, r13
    1a18:	62 0f       	add	r22, r18
    1a1a:	c0 95       	com	r28
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	82 0f       	add	r24, r18
    1a20:	91 1d       	adc	r25, r1
    1a22:	fc 01       	movw	r30, r24
    1a24:	e0 58       	subi	r30, 0x80	; 128
    1a26:	fe 4f       	sbci	r31, 0xFE	; 254
    1a28:	30 81       	ld	r19, Z
    1a2a:	0f 3f       	cpi	r16, 0xFF	; 255
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <GLCD_SetPixels+0xc4>
    1a2e:	31 2b       	or	r19, r17
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <GLCD_SetPixels+0xc6>
    1a32:	3c 23       	and	r19, r28
    1a34:	fc 01       	movw	r30, r24
    1a36:	e0 58       	subi	r30, 0x80	; 128
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	30 83       	st	Z, r19
    1a3c:	2f 5f       	subi	r18, 0xFF	; 255
    1a3e:	62 13       	cpse	r22, r18
    1a40:	ed cf       	rjmp	.-38     	; 0x1a1c <GLCD_SetPixels+0xae>
    1a42:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <__GLCD+0x1>
    1a46:	1d c0       	rjmp	.+58     	; 0x1a82 <GLCD_SetPixels+0x114>
    1a48:	18 5f       	subi	r17, 0xF8	; 248
    1a4a:	61 2f       	mov	r22, r17
    1a4c:	8c 2d       	mov	r24, r12
    1a4e:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
    1a52:	dd 20       	and	r13, r13
    1a54:	d1 f0       	breq	.+52     	; 0x1a8a <GLCD_SetPixels+0x11c>
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
    1a58:	2a 81       	ldd	r18, Y+2	; 0x02
    1a5a:	26 95       	lsr	r18
    1a5c:	26 95       	lsr	r18
    1a5e:	26 95       	lsr	r18
    1a60:	80 e8       	ldi	r24, 0x80	; 128
    1a62:	28 9f       	mul	r18, r24
    1a64:	90 01       	movw	r18, r0
    1a66:	11 24       	eor	r1, r1
    1a68:	89 2f       	mov	r24, r25
    1a6a:	8d 0d       	add	r24, r13
    1a6c:	20 58       	subi	r18, 0x80	; 128
    1a6e:	3e 4f       	sbci	r19, 0xFE	; 254
    1a70:	f9 01       	movw	r30, r18
    1a72:	e9 0f       	add	r30, r25
    1a74:	f1 1d       	adc	r31, r1
    1a76:	00 83       	st	Z, r16
    1a78:	9f 5f       	subi	r25, 0xFF	; 255
    1a7a:	89 13       	cpse	r24, r25
    1a7c:	f9 cf       	rjmp	.-14     	; 0x1a70 <GLCD_SetPixels+0x102>
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <GLCD_SetPixels+0x11c>
    1a82:	19 2d       	mov	r17, r9
    1a84:	b9 18       	sub	r11, r9
    1a86:	c6 e7       	ldi	r28, 0x76	; 118
    1a88:	d1 e0       	ldi	r29, 0x01	; 1
    1a8a:	8b 2d       	mov	r24, r11
    1a8c:	81 0f       	add	r24, r17
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	48 5f       	subi	r20, 0xF8	; 248
    1a96:	5f 4f       	sbci	r21, 0xFF	; 255
    1a98:	e4 16       	cp	r14, r20
    1a9a:	f5 06       	cpc	r15, r21
    1a9c:	ac f6       	brge	.-86     	; 0x1a48 <GLCD_SetPixels+0xda>
    1a9e:	8a 15       	cp	r24, r10
    1aa0:	a0 f5       	brcc	.+104    	; 0x1b0a <GLCD_SetPixels+0x19c>
    1aa2:	e2 1a       	sub	r14, r18
    1aa4:	f3 0a       	sbc	r15, r19
    1aa6:	cf ef       	ldi	r28, 0xFF	; 255
    1aa8:	d0 e0       	ldi	r29, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <GLCD_SetPixels+0x142>
    1aac:	cc 0f       	add	r28, r28
    1aae:	dd 1f       	adc	r29, r29
    1ab0:	ea 94       	dec	r14
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <GLCD_SetPixels+0x13e>
    1ab4:	c0 95       	com	r28
    1ab6:	68 e0       	ldi	r22, 0x08	; 8
    1ab8:	61 0f       	add	r22, r17
    1aba:	8c 2d       	mov	r24, r12
    1abc:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
    1ac0:	dd 20       	and	r13, r13
    1ac2:	19 f1       	breq	.+70     	; 0x1b0a <GLCD_SetPixels+0x19c>
    1ac4:	e6 e7       	ldi	r30, 0x76	; 118
    1ac6:	f1 e0       	ldi	r31, 0x01	; 1
    1ac8:	21 81       	ldd	r18, Z+1	; 0x01
    1aca:	42 81       	ldd	r20, Z+2	; 0x02
    1acc:	46 95       	lsr	r20
    1ace:	46 95       	lsr	r20
    1ad0:	46 95       	lsr	r20
    1ad2:	80 e8       	ldi	r24, 0x80	; 128
    1ad4:	48 9f       	mul	r20, r24
    1ad6:	a0 01       	movw	r20, r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	d2 0e       	add	r13, r18
    1adc:	6c 2f       	mov	r22, r28
    1ade:	60 95       	com	r22
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	82 0f       	add	r24, r18
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	e0 58       	subi	r30, 0x80	; 128
    1aea:	fe 4f       	sbci	r31, 0xFE	; 254
    1aec:	30 81       	ld	r19, Z
    1aee:	0f 3f       	cpi	r16, 0xFF	; 255
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <GLCD_SetPixels+0x188>
    1af2:	3c 2b       	or	r19, r28
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <GLCD_SetPixels+0x18a>
    1af6:	36 23       	and	r19, r22
    1af8:	fc 01       	movw	r30, r24
    1afa:	e0 58       	subi	r30, 0x80	; 128
    1afc:	fe 4f       	sbci	r31, 0xFE	; 254
    1afe:	30 83       	st	Z, r19
    1b00:	2f 5f       	subi	r18, 0xFF	; 255
    1b02:	d2 12       	cpse	r13, r18
    1b04:	ed cf       	rjmp	.-38     	; 0x1ae0 <GLCD_SetPixels+0x172>
    1b06:	d0 92 77 01 	sts	0x0177, r13	; 0x800177 <__GLCD+0x1>
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	af 90       	pop	r10
    1b1e:	9f 90       	pop	r9
    1b20:	08 95       	ret

00001b22 <GLCD_DrawRectangle>:
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	88 23       	and	r24, r24
    1b32:	0c f4       	brge	.+2      	; 0x1b36 <GLCD_DrawRectangle+0x14>
    1b34:	49 c0       	rjmp	.+146    	; 0x1bc8 <GLCD_DrawRectangle+0xa6>
    1b36:	44 23       	and	r20, r20
    1b38:	0c f4       	brge	.+2      	; 0x1b3c <GLCD_DrawRectangle+0x1a>
    1b3a:	46 c0       	rjmp	.+140    	; 0x1bc8 <GLCD_DrawRectangle+0xa6>
    1b3c:	60 34       	cpi	r22, 0x40	; 64
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <GLCD_DrawRectangle+0x20>
    1b40:	43 c0       	rjmp	.+134    	; 0x1bc8 <GLCD_DrawRectangle+0xa6>
    1b42:	20 34       	cpi	r18, 0x40	; 64
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <GLCD_DrawRectangle+0x26>
    1b46:	40 c0       	rjmp	.+128    	; 0x1bc8 <GLCD_DrawRectangle+0xa6>
    1b48:	d0 2f       	mov	r29, r16
    1b4a:	f2 2e       	mov	r15, r18
    1b4c:	d4 2e       	mov	r13, r20
    1b4e:	16 2f       	mov	r17, r22
    1b50:	e8 2e       	mov	r14, r24
    1b52:	48 17       	cp	r20, r24
    1b54:	f8 f4       	brcc	.+62     	; 0x1b94 <GLCD_DrawRectangle+0x72>
    1b56:	08 2f       	mov	r16, r24
    1b58:	c4 2f       	mov	r28, r20
    1b5a:	4d 2f       	mov	r20, r29
    1b5c:	61 2f       	mov	r22, r17
    1b5e:	8c 2f       	mov	r24, r28
    1b60:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <GLCD_SetPixel>
    1b64:	cf 5f       	subi	r28, 0xFF	; 255
    1b66:	0c 17       	cp	r16, r28
    1b68:	c0 f7       	brcc	.-16     	; 0x1b5a <GLCD_DrawRectangle+0x38>
    1b6a:	de 14       	cp	r13, r14
    1b6c:	b0 f4       	brcc	.+44     	; 0x1b9a <GLCD_DrawRectangle+0x78>
    1b6e:	0e 2d       	mov	r16, r14
    1b70:	cd 2d       	mov	r28, r13
    1b72:	4d 2f       	mov	r20, r29
    1b74:	6f 2d       	mov	r22, r15
    1b76:	8c 2f       	mov	r24, r28
    1b78:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <GLCD_SetPixel>
    1b7c:	cf 5f       	subi	r28, 0xFF	; 255
    1b7e:	0c 17       	cp	r16, r28
    1b80:	c0 f7       	brcc	.-16     	; 0x1b72 <GLCD_DrawRectangle+0x50>
    1b82:	f1 16       	cp	r15, r17
    1b84:	68 f0       	brcs	.+26     	; 0x1ba0 <GLCD_DrawRectangle+0x7e>
    1b86:	16 c0       	rjmp	.+44     	; 0x1bb4 <GLCD_DrawRectangle+0x92>
    1b88:	0d 2f       	mov	r16, r29
    1b8a:	4d 2d       	mov	r20, r13
    1b8c:	8d 2d       	mov	r24, r13
    1b8e:	0e 94 b7 0c 	call	0x196e	; 0x196e <GLCD_SetPixels>
    1b92:	1a c0       	rjmp	.+52     	; 0x1bc8 <GLCD_DrawRectangle+0xa6>
    1b94:	04 2f       	mov	r16, r20
    1b96:	c8 2f       	mov	r28, r24
    1b98:	e0 cf       	rjmp	.-64     	; 0x1b5a <GLCD_DrawRectangle+0x38>
    1b9a:	0d 2d       	mov	r16, r13
    1b9c:	ce 2d       	mov	r28, r14
    1b9e:	e9 cf       	rjmp	.-46     	; 0x1b72 <GLCD_DrawRectangle+0x50>
    1ba0:	0d 2f       	mov	r16, r29
    1ba2:	21 2f       	mov	r18, r17
    1ba4:	4e 2d       	mov	r20, r14
    1ba6:	6f 2d       	mov	r22, r15
    1ba8:	8e 2d       	mov	r24, r14
    1baa:	0e 94 b7 0c 	call	0x196e	; 0x196e <GLCD_SetPixels>
    1bae:	21 2f       	mov	r18, r17
    1bb0:	6f 2d       	mov	r22, r15
    1bb2:	ea cf       	rjmp	.-44     	; 0x1b88 <GLCD_DrawRectangle+0x66>
    1bb4:	0d 2f       	mov	r16, r29
    1bb6:	2f 2d       	mov	r18, r15
    1bb8:	4e 2d       	mov	r20, r14
    1bba:	61 2f       	mov	r22, r17
    1bbc:	8e 2d       	mov	r24, r14
    1bbe:	0e 94 b7 0c 	call	0x196e	; 0x196e <GLCD_SetPixels>
    1bc2:	2f 2d       	mov	r18, r15
    1bc4:	61 2f       	mov	r22, r17
    1bc6:	e0 cf       	rjmp	.-64     	; 0x1b88 <GLCD_DrawRectangle+0x66>
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	08 95       	ret

00001bd8 <GLCD_SetFont>:
    1bd8:	66 23       	and	r22, r22
    1bda:	e4 f0       	brlt	.+56     	; 0x1c14 <GLCD_SetFont+0x3c>
    1bdc:	40 34       	cpi	r20, 0x40	; 64
    1bde:	d0 f4       	brcc	.+52     	; 0x1c14 <GLCD_SetFont+0x3c>
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	c0 f4       	brcc	.+48     	; 0x1c14 <GLCD_SetFont+0x3c>
    1be4:	e6 e7       	ldi	r30, 0x76	; 118
    1be6:	f1 e0       	ldi	r31, 0x01	; 1
    1be8:	95 83       	std	Z+5, r25	; 0x05
    1bea:	84 83       	std	Z+4, r24	; 0x04
    1bec:	66 83       	std	Z+6, r22	; 0x06
    1bee:	47 83       	std	Z+7, r20	; 0x07
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	41 50       	subi	r20, 0x01	; 1
    1bf4:	51 09       	sbc	r21, r1
    1bf6:	ca 01       	movw	r24, r20
    1bf8:	99 23       	and	r25, r25
    1bfa:	0c f4       	brge	.+2      	; 0x1bfe <GLCD_SetFont+0x26>
    1bfc:	07 96       	adiw	r24, 0x07	; 7
    1bfe:	95 95       	asr	r25
    1c00:	87 95       	ror	r24
    1c02:	95 95       	asr	r25
    1c04:	87 95       	ror	r24
    1c06:	95 95       	asr	r25
    1c08:	87 95       	ror	r24
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__GLCD+0x8>
    1c10:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <__GLCD+0x9>
    1c14:	08 95       	ret

00001c16 <GLCD_PrintChar>:

void GLCD_PrintChar(char Character)
{
    1c16:	2f 92       	push	r2
    1c18:	3f 92       	push	r3
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <GLCD_PrintChar+0x26>
    1c3c:	1f 92       	push	r1
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    1c42:	e6 e7       	ldi	r30, 0x76	; 118
    1c44:	f1 e0       	ldi	r31, 0x01	; 1
    1c46:	31 80       	ldd	r3, Z+1	; 0x01
	y = y2 = __GLCD.Y;
    1c48:	22 80       	ldd	r2, Z+2	; 0x02
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    1c4a:	90 85       	ldd	r25, Z+8	; 0x08
    1c4c:	26 81       	ldd	r18, Z+6	; 0x06
    1c4e:	29 9f       	mul	r18, r25
    1c50:	90 01       	movw	r18, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	2f 5f       	subi	r18, 0xFF	; 255
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	80 52       	subi	r24, 0x20	; 32
    1c5a:	82 9f       	mul	r24, r18
    1c5c:	a0 01       	movw	r20, r0
    1c5e:	83 9f       	mul	r24, r19
    1c60:	50 0d       	add	r21, r0
    1c62:	11 24       	eor	r1, r1
    1c64:	5a 83       	std	Y+2, r21	; 0x02
    1c66:	49 83       	std	Y+1, r20	; 0x01
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    1c68:	4a 01       	movw	r8, r20
    1c6a:	5f ef       	ldi	r21, 0xFF	; 255
    1c6c:	85 1a       	sub	r8, r21
    1c6e:	95 0a       	sbc	r9, r21
    1c70:	04 80       	ldd	r0, Z+4	; 0x04
    1c72:	f5 81       	ldd	r31, Z+5	; 0x05
    1c74:	e0 2d       	mov	r30, r0
    1c76:	a9 81       	ldd	r26, Y+1	; 0x01
    1c78:	ba 81       	ldd	r27, Y+2	; 0x02
    1c7a:	ea 0f       	add	r30, r26
    1c7c:	fb 1f       	adc	r31, r27
    1c7e:	c4 90       	lpm	r12, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    1c80:	b2 2d       	mov	r27, r2
    1c82:	b7 70       	andi	r27, 0x07	; 7
    1c84:	6b 2e       	mov	r6, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    1c86:	99 23       	and	r25, r25
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <GLCD_PrintChar+0x76>
    1c8a:	76 c0       	rjmp	.+236    	; 0x1d78 <GLCD_PrintChar+0x162>
    1c8c:	d2 2c       	mov	r13, r2
    1c8e:	10 e0       	ldi	r17, 0x00	; 0
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    1c90:	88 e0       	ldi	r24, 0x08	; 8
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	5c 01       	movw	r10, r24
    1c96:	ab 1a       	sub	r10, r27
    1c98:	b1 08       	sbc	r11, r1
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    1c9a:	6d 2d       	mov	r22, r13
    1c9c:	83 2d       	mov	r24, r3
    1c9e:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    1ca2:	94 01       	movw	r18, r8
    1ca4:	21 0f       	add	r18, r17
    1ca6:	31 1d       	adc	r19, r1
		fontReadPrev = fontRead - 1;
    1ca8:	d9 01       	movw	r26, r18
    1caa:	11 97       	sbiw	r26, 0x01	; 1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    1cac:	cc 20       	and	r12, r12
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <GLCD_PrintChar+0x9c>
    1cb0:	46 c0       	rjmp	.+140    	; 0x1d3e <GLCD_PrintChar+0x128>
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    1cb2:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <__GLCD+0x4>
    1cb6:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <__GLCD+0x5>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    1cba:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <__GLCD+0x8>
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    1cc0:	00 91 7f 01 	lds	r16, 0x017F	; 0x80017f <__GLCD+0x9>
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    1cc4:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <__GLCD+0x2>
    1cc8:	46 95       	lsr	r20
    1cca:	46 95       	lsr	r20
    1ccc:	46 95       	lsr	r20
    1cce:	e0 e8       	ldi	r30, 0x80	; 128
    1cd0:	4e 9f       	mul	r20, r30
    1cd2:	a0 01       	movw	r20, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	70 90 77 01 	lds	r7, 0x0177	; 0x800177 <__GLCD+0x1>
    1cda:	2e 0d       	add	r18, r14
    1cdc:	3f 1d       	adc	r19, r15
    1cde:	5c 2c       	mov	r5, r12
    1ce0:	57 0c       	add	r5, r7
    1ce2:	40 58       	subi	r20, 0x80	; 128
    1ce4:	5e 4f       	sbci	r21, 0xFE	; 254

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	84 91       	lpm	r24, Z
			
			//Shift byte
			data <<= overflow;
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	06 2c       	mov	r0, r6
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <GLCD_PrintChar+0xde>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <GLCD_PrintChar+0xda>
    1cf8:	48 2e       	mov	r4, r24
			
			//Merge byte with previous one
			if (j > 0)
    1cfa:	11 23       	and	r17, r17
    1cfc:	71 f0       	breq	.+28     	; 0x1d1a <GLCD_PrintChar+0x104>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    1cfe:	f7 01       	movw	r30, r14
    1d00:	ea 0f       	add	r30, r26
    1d02:	fb 1f       	adc	r31, r27
    1d04:	e4 91       	lpm	r30, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	0a 2c       	mov	r0, r10
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <GLCD_PrintChar+0xfa>
    1d0c:	f5 95       	asr	r31
    1d0e:	e7 95       	ror	r30
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <GLCD_PrintChar+0xf6>
				data |= dataPrev;
    1d14:	4e 2a       	or	r4, r30
				fontReadPrev += __GLCD.Font.Lines;
    1d16:	a6 0f       	add	r26, r22
    1d18:	b7 1f       	adc	r27, r23
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    1d1a:	01 30       	cpi	r16, 0x01	; 1
    1d1c:	29 f4       	brne	.+10     	; 0x1d28 <GLCD_PrintChar+0x112>
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    1d1e:	fa 01       	movw	r30, r20
    1d20:	e7 0d       	add	r30, r7
    1d22:	f1 1d       	adc	r31, r1
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2a       	or	r4, r24
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    1d28:	fa 01       	movw	r30, r20
    1d2a:	e7 0d       	add	r30, r7
    1d2c:	f1 1d       	adc	r31, r1
    1d2e:	40 82       	st	Z, r4
    1d30:	73 94       	inc	r7
    1d32:	26 0f       	add	r18, r22
    1d34:	37 1f       	adc	r19, r23
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    1d36:	57 10       	cpse	r5, r7
    1d38:	d6 cf       	rjmp	.-84     	; 0x1ce6 <GLCD_PrintChar+0xd0>
    1d3a:	50 92 77 01 	sts	0x0177, r5	; 0x800177 <__GLCD+0x1>
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    1d3e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <__GLCD+0x9>
    1d42:	81 11       	cpse	r24, r1
    1d44:	10 c0       	rjmp	.+32     	; 0x1d66 <GLCD_PrintChar+0x150>
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    1d46:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <__GLCD+0x2>
    1d4a:	e6 95       	lsr	r30
    1d4c:	e6 95       	lsr	r30
    1d4e:	e6 95       	lsr	r30
    1d50:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <__GLCD+0x1>
    1d54:	20 e8       	ldi	r18, 0x80	; 128
    1d56:	e2 9f       	mul	r30, r18
    1d58:	f0 01       	movw	r30, r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	e0 58       	subi	r30, 0x80	; 128
    1d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d60:	e8 0f       	add	r30, r24
    1d62:	f1 1d       	adc	r31, r1
    1d64:	10 82       	st	Z, r1
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    1d66:	38 e0       	ldi	r19, 0x08	; 8
    1d68:	d3 0e       	add	r13, r19
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    1d6a:	1f 5f       	subi	r17, 0xFF	; 255
    1d6c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__GLCD+0x8>
    1d70:	18 17       	cp	r17, r24
    1d72:	08 f4       	brcc	.+2      	; 0x1d76 <GLCD_PrintChar+0x160>
    1d74:	92 cf       	rjmp	.-220    	; 0x1c9a <GLCD_PrintChar+0x84>
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <GLCD_PrintChar+0x166>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    1d78:	d2 2c       	mov	r13, r2
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    1d7a:	10 e0       	ldi	r17, 0x00	; 0
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    1d7c:	22 2d       	mov	r18, r2
    1d7e:	22 95       	swap	r18
    1d80:	26 95       	lsr	r18
    1d82:	26 95       	lsr	r18
    1d84:	23 70       	andi	r18, 0x03	; 3
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <__GLCD+0x7>
    1d8c:	42 95       	swap	r20
    1d8e:	46 95       	lsr	r20
    1d90:	46 95       	lsr	r20
    1d92:	43 70       	andi	r20, 0x03	; 3
    1d94:	82 2d       	mov	r24, r2
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	84 0f       	add	r24, r20
    1d9a:	91 1d       	adc	r25, r1
    1d9c:	28 17       	cp	r18, r24
    1d9e:	39 07       	cpc	r19, r25
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <GLCD_PrintChar+0x18e>
    1da2:	64 c0       	rjmp	.+200    	; 0x1e6c <GLCD_PrintChar+0x256>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    1da4:	6d 2d       	mov	r22, r13
    1da6:	83 2d       	mov	r24, r3
    1da8:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	81 0f       	add	r24, r17
    1db2:	91 1d       	adc	r25, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    1db4:	cc 20       	and	r12, r12
    1db6:	09 f4       	brne	.+2      	; 0x1dba <GLCD_PrintChar+0x1a4>
    1db8:	42 c0       	rjmp	.+132    	; 0x1e3e <GLCD_PrintChar+0x228>
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    1dba:	a6 e7       	ldi	r26, 0x76	; 118
    1dbc:	b1 e0       	ldi	r27, 0x01	; 1
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    1dbe:	12 96       	adiw	r26, 0x02	; 2
    1dc0:	2c 91       	ld	r18, X
    1dc2:	12 97       	sbiw	r26, 0x02	; 2
    1dc4:	26 95       	lsr	r18
    1dc6:	26 95       	lsr	r18
    1dc8:	26 95       	lsr	r18
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	24 9f       	mul	r18, r20
    1dce:	90 01       	movw	r18, r0
    1dd0:	11 24       	eor	r1, r1
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    1dd2:	19 96       	adiw	r26, 0x09	; 9
    1dd4:	fc 90       	ld	r15, X
    1dd6:	19 97       	sbiw	r26, 0x09	; 9
    1dd8:	11 96       	adiw	r26, 0x01	; 1
    1dda:	0c 91       	ld	r16, X
    1ddc:	11 97       	sbiw	r26, 0x01	; 1
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    1dde:	18 96       	adiw	r26, 0x08	; 8
    1de0:	4c 91       	ld	r20, X
    1de2:	18 97       	sbiw	r26, 0x08	; 8
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	14 96       	adiw	r26, 0x04	; 4
    1de8:	ed 91       	ld	r30, X+
    1dea:	fc 91       	ld	r31, X
    1dec:	15 97       	sbiw	r26, 0x05	; 5
    1dee:	e8 0f       	add	r30, r24
    1df0:	f9 1f       	adc	r31, r25
    1df2:	10 2f       	mov	r17, r16
    1df4:	1c 0d       	add	r17, r12
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    1df6:	68 e0       	ldi	r22, 0x08	; 8
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	66 19       	sub	r22, r6
    1dfc:	71 09       	sbc	r23, r1
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    1dfe:	59 01       	movw	r10, r18
    1e00:	a0 0e       	add	r10, r16
    1e02:	b1 1c       	adc	r11, r1
    1e04:	c5 01       	movw	r24, r10
    1e06:	80 58       	subi	r24, 0x80	; 128
    1e08:	9e 4f       	sbci	r25, 0xFE	; 254
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	ec 90       	ld	r14, X
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    1e0e:	84 91       	lpm	r24, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	06 2e       	mov	r0, r22
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <GLCD_PrintChar+0x204>
    1e16:	95 95       	asr	r25
    1e18:	87 95       	ror	r24
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <GLCD_PrintChar+0x200>
			data |= dataPrev;
    1e1e:	8e 29       	or	r24, r14
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    1e20:	b1 e0       	ldi	r27, 0x01	; 1
    1e22:	fb 12       	cpse	r15, r27
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <GLCD_PrintChar+0x212>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    1e26:	8e 29       	or	r24, r14
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    1e28:	d5 01       	movw	r26, r10
    1e2a:	a0 58       	subi	r26, 0x80	; 128
    1e2c:	be 4f       	sbci	r27, 0xFE	; 254
    1e2e:	8c 93       	st	X, r24
    1e30:	0f 5f       	subi	r16, 0xFF	; 255
    1e32:	e4 0f       	add	r30, r20
    1e34:	f5 1f       	adc	r31, r21
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    1e36:	01 13       	cpse	r16, r17
    1e38:	e2 cf       	rjmp	.-60     	; 0x1dfe <GLCD_PrintChar+0x1e8>
    1e3a:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <__GLCD+0x1>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    1e3e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <__GLCD+0x9>
    1e42:	81 11       	cpse	r24, r1
    1e44:	13 c0       	rjmp	.+38     	; 0x1e6c <GLCD_PrintChar+0x256>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    1e46:	a6 e7       	ldi	r26, 0x76	; 118
    1e48:	b1 e0       	ldi	r27, 0x01	; 1
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    1e4a:	12 96       	adiw	r26, 0x02	; 2
    1e4c:	ec 91       	ld	r30, X
    1e4e:	12 97       	sbiw	r26, 0x02	; 2
    1e50:	e6 95       	lsr	r30
    1e52:	e6 95       	lsr	r30
    1e54:	e6 95       	lsr	r30
    1e56:	11 96       	adiw	r26, 0x01	; 1
    1e58:	8c 91       	ld	r24, X
    1e5a:	20 e8       	ldi	r18, 0x80	; 128
    1e5c:	e2 9f       	mul	r30, r18
    1e5e:	f0 01       	movw	r30, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	e0 58       	subi	r30, 0x80	; 128
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	e8 0f       	add	r30, r24
    1e68:	f1 1d       	adc	r31, r1
    1e6a:	10 82       	st	Z, r1
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	83 0d       	add	r24, r3
    1e70:	62 2d       	mov	r22, r2
    1e72:	8c 0d       	add	r24, r12
    1e74:	0e 94 14 0c 	call	0x1828	; 0x1828 <GLCD_GotoXY>
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	df 90       	pop	r13
    1e8c:	cf 90       	pop	r12
    1e8e:	bf 90       	pop	r11
    1e90:	af 90       	pop	r10
    1e92:	9f 90       	pop	r9
    1e94:	8f 90       	pop	r8
    1e96:	7f 90       	pop	r7
    1e98:	6f 90       	pop	r6
    1e9a:	5f 90       	pop	r5
    1e9c:	4f 90       	pop	r4
    1e9e:	3f 90       	pop	r3
    1ea0:	2f 90       	pop	r2
    1ea2:	08 95       	ret

00001ea4 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
	while(*Text)
    1eae:	88 81       	ld	r24, Y
    1eb0:	88 23       	and	r24, r24
    1eb2:	d9 f0       	breq	.+54     	; 0x1eea <GLCD_PrintString+0x46>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    1eb4:	e6 e7       	ldi	r30, 0x76	; 118
    1eb6:	f1 e0       	ldi	r31, 0x01	; 1
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	26 81       	ldd	r18, Z+6	; 0x06
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	29 0f       	add	r18, r25
    1ec0:	31 1d       	adc	r19, r1
    1ec2:	20 38       	cpi	r18, 0x80	; 128
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	8c f4       	brge	.+34     	; 0x1eea <GLCD_PrintString+0x46>
    1ec8:	21 96       	adiw	r28, 0x01	; 1
    1eca:	8f 01       	movw	r16, r30
    1ecc:	09 c0       	rjmp	.+18     	; 0x1ee0 <GLCD_PrintString+0x3c>
    1ece:	f8 01       	movw	r30, r16
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	26 81       	ldd	r18, Z+6	; 0x06
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	29 0f       	add	r18, r25
    1ed8:	31 1d       	adc	r19, r1
    1eda:	20 38       	cpi	r18, 0x80	; 128
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <GLCD_PrintString+0x46>
			break;

		GLCD_PrintChar(*Text++);
    1ee0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    1ee4:	89 91       	ld	r24, Y+
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	f2 cf       	rjmp	.-28     	; 0x1ece <GLCD_PrintString+0x2a>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <GLCD_PrintString_P>:

void GLCD_PrintString_P(const char *Text)
{
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
	char r = pgm_read_byte(Text++);
    1efc:	ec 01       	movw	r28, r24
    1efe:	21 96       	adiw	r28, 0x01	; 1
    1f00:	fc 01       	movw	r30, r24
    1f02:	84 91       	lpm	r24, Z
	while(r)
    1f04:	88 23       	and	r24, r24
    1f06:	e1 f0       	breq	.+56     	; 0x1f40 <GLCD_PrintString_P+0x4c>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width) 
    1f08:	e6 e7       	ldi	r30, 0x76	; 118
    1f0a:	f1 e0       	ldi	r31, 0x01	; 1
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	26 81       	ldd	r18, Z+6	; 0x06
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	29 0f       	add	r18, r25
    1f14:	31 1d       	adc	r19, r1
    1f16:	20 38       	cpi	r18, 0x80	; 128
    1f18:	31 05       	cpc	r19, r1
    1f1a:	94 f4       	brge	.+36     	; 0x1f40 <GLCD_PrintString_P+0x4c>
    1f1c:	8f 01       	movw	r16, r30
    1f1e:	0a c0       	rjmp	.+20     	; 0x1f34 <GLCD_PrintString_P+0x40>
    1f20:	21 96       	adiw	r28, 0x01	; 1
    1f22:	f8 01       	movw	r30, r16
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	26 81       	ldd	r18, Z+6	; 0x06
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	29 0f       	add	r18, r25
    1f2c:	31 1d       	adc	r19, r1
    1f2e:	20 38       	cpi	r18, 0x80	; 128
    1f30:	31 05       	cpc	r19, r1
    1f32:	34 f4       	brge	.+12     	; 0x1f40 <GLCD_PrintString_P+0x4c>
			break;

		GLCD_PrintChar(r);
    1f34:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <GLCD_PrintChar>
		r = pgm_read_byte(Text++);
    1f38:	fe 01       	movw	r30, r28
    1f3a:	84 91       	lpm	r24, Z
}

void GLCD_PrintString_P(const char *Text)
{
	char r = pgm_read_byte(Text++);
	while(r)
    1f3c:	81 11       	cpse	r24, r1
    1f3e:	f0 cf       	rjmp	.-32     	; 0x1f20 <GLCD_PrintString_P+0x2c>
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    1f4a:	3c 9a       	sbi	0x07, 4	; 7
	PinMode(TWI_SCL, Output);
    1f4c:	3d 9a       	sbi	0x07, 5	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    1f4e:	44 9a       	sbi	0x08, 4	; 8
	DigitalWrite(TWI_SCL, High);
    1f50:	45 9a       	sbi	0x08, 5	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    1f52:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    1f5c:	84 e0       	ldi	r24, 0x04	; 4
    1f5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f62:	08 95       	ret

00001f64 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    1f64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
}
    1f68:	88 7f       	andi	r24, 0xF8	; 248
    1f6a:	08 95       	ret

00001f6c <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1f6c:	84 ea       	ldi	r24, 0xA4	; 164
    1f6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    1f72:	ec eb       	ldi	r30, 0xBC	; 188
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	88 23       	and	r24, r24
    1f7a:	ec f7       	brge	.-6      	; 0x1f76 <TWI_BeginTransmission+0xa>
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    1f7c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));

	//Return status register
	return (TWI_Status());
}
    1f80:	88 7f       	andi	r24, 0xF8	; 248
    1f82:	08 95       	ret

00001f84 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1f84:	85 ed       	ldi	r24, 0xD5	; 213
    1f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    1f8a:	ec eb       	ldi	r30, 0xBC	; 188
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	84 fd       	sbrc	r24, 4
    1f92:	fd cf       	rjmp	.-6      	; 0x1f8e <TWI_EndTransmission+0xa>
}
    1f94:	08 95       	ret

00001f96 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    1f96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f9a:	84 e8       	ldi	r24, 0x84	; 132
    1f9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    1fa0:	ec eb       	ldi	r30, 0xBC	; 188
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 23       	and	r24, r24
    1fa8:	ec f7       	brge	.-6      	; 0x1fa4 <TWI_Transmit+0xe>
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    1faa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));

	//Return status register
	return (TWI_Status());
}
    1fae:	88 7f       	andi	r24, 0xF8	; 248
    1fb0:	08 95       	ret

00001fb2 <__subsf3>:
    1fb2:	50 58       	subi	r21, 0x80	; 128

00001fb4 <__addsf3>:
    1fb4:	bb 27       	eor	r27, r27
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__addsf3x>
    1fbc:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_round>
    1fc0:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_pscA>
    1fc4:	38 f0       	brcs	.+14     	; 0x1fd4 <__addsf3+0x20>
    1fc6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fp_pscB>
    1fca:	20 f0       	brcs	.+8      	; 0x1fd4 <__addsf3+0x20>
    1fcc:	39 f4       	brne	.+14     	; 0x1fdc <__addsf3+0x28>
    1fce:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd0:	19 f4       	brne	.+6      	; 0x1fd8 <__addsf3+0x24>
    1fd2:	26 f4       	brtc	.+8      	; 0x1fdc <__addsf3+0x28>
    1fd4:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__fp_nan>
    1fd8:	0e f4       	brtc	.+2      	; 0x1fdc <__addsf3+0x28>
    1fda:	e0 95       	com	r30
    1fdc:	e7 fb       	bst	r30, 7
    1fde:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_inf>

00001fe2 <__addsf3x>:
    1fe2:	e9 2f       	mov	r30, r25
    1fe4:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_split3>
    1fe8:	58 f3       	brcs	.-42     	; 0x1fc0 <__addsf3+0xc>
    1fea:	ba 17       	cp	r27, r26
    1fec:	62 07       	cpc	r22, r18
    1fee:	73 07       	cpc	r23, r19
    1ff0:	84 07       	cpc	r24, r20
    1ff2:	95 07       	cpc	r25, r21
    1ff4:	20 f0       	brcs	.+8      	; 0x1ffe <__addsf3x+0x1c>
    1ff6:	79 f4       	brne	.+30     	; 0x2016 <__addsf3x+0x34>
    1ff8:	a6 f5       	brtc	.+104    	; 0x2062 <__addsf3x+0x80>
    1ffa:	0c 94 97 11 	jmp	0x232e	; 0x232e <__fp_zero>
    1ffe:	0e f4       	brtc	.+2      	; 0x2002 <__addsf3x+0x20>
    2000:	e0 95       	com	r30
    2002:	0b 2e       	mov	r0, r27
    2004:	ba 2f       	mov	r27, r26
    2006:	a0 2d       	mov	r26, r0
    2008:	0b 01       	movw	r0, r22
    200a:	b9 01       	movw	r22, r18
    200c:	90 01       	movw	r18, r0
    200e:	0c 01       	movw	r0, r24
    2010:	ca 01       	movw	r24, r20
    2012:	a0 01       	movw	r20, r0
    2014:	11 24       	eor	r1, r1
    2016:	ff 27       	eor	r31, r31
    2018:	59 1b       	sub	r21, r25
    201a:	99 f0       	breq	.+38     	; 0x2042 <__addsf3x+0x60>
    201c:	59 3f       	cpi	r21, 0xF9	; 249
    201e:	50 f4       	brcc	.+20     	; 0x2034 <__addsf3x+0x52>
    2020:	50 3e       	cpi	r21, 0xE0	; 224
    2022:	68 f1       	brcs	.+90     	; 0x207e <__addsf3x+0x9c>
    2024:	1a 16       	cp	r1, r26
    2026:	f0 40       	sbci	r31, 0x00	; 0
    2028:	a2 2f       	mov	r26, r18
    202a:	23 2f       	mov	r18, r19
    202c:	34 2f       	mov	r19, r20
    202e:	44 27       	eor	r20, r20
    2030:	58 5f       	subi	r21, 0xF8	; 248
    2032:	f3 cf       	rjmp	.-26     	; 0x201a <__addsf3x+0x38>
    2034:	46 95       	lsr	r20
    2036:	37 95       	ror	r19
    2038:	27 95       	ror	r18
    203a:	a7 95       	ror	r26
    203c:	f0 40       	sbci	r31, 0x00	; 0
    203e:	53 95       	inc	r21
    2040:	c9 f7       	brne	.-14     	; 0x2034 <__addsf3x+0x52>
    2042:	7e f4       	brtc	.+30     	; 0x2062 <__addsf3x+0x80>
    2044:	1f 16       	cp	r1, r31
    2046:	ba 0b       	sbc	r27, r26
    2048:	62 0b       	sbc	r22, r18
    204a:	73 0b       	sbc	r23, r19
    204c:	84 0b       	sbc	r24, r20
    204e:	ba f0       	brmi	.+46     	; 0x207e <__addsf3x+0x9c>
    2050:	91 50       	subi	r25, 0x01	; 1
    2052:	a1 f0       	breq	.+40     	; 0x207c <__addsf3x+0x9a>
    2054:	ff 0f       	add	r31, r31
    2056:	bb 1f       	adc	r27, r27
    2058:	66 1f       	adc	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	c2 f7       	brpl	.-16     	; 0x2050 <__addsf3x+0x6e>
    2060:	0e c0       	rjmp	.+28     	; 0x207e <__addsf3x+0x9c>
    2062:	ba 0f       	add	r27, r26
    2064:	62 1f       	adc	r22, r18
    2066:	73 1f       	adc	r23, r19
    2068:	84 1f       	adc	r24, r20
    206a:	48 f4       	brcc	.+18     	; 0x207e <__addsf3x+0x9c>
    206c:	87 95       	ror	r24
    206e:	77 95       	ror	r23
    2070:	67 95       	ror	r22
    2072:	b7 95       	ror	r27
    2074:	f7 95       	ror	r31
    2076:	9e 3f       	cpi	r25, 0xFE	; 254
    2078:	08 f0       	brcs	.+2      	; 0x207c <__addsf3x+0x9a>
    207a:	b0 cf       	rjmp	.-160    	; 0x1fdc <__addsf3+0x28>
    207c:	93 95       	inc	r25
    207e:	88 0f       	add	r24, r24
    2080:	08 f0       	brcs	.+2      	; 0x2084 <__addsf3x+0xa2>
    2082:	99 27       	eor	r25, r25
    2084:	ee 0f       	add	r30, r30
    2086:	97 95       	ror	r25
    2088:	87 95       	ror	r24
    208a:	08 95       	ret

0000208c <__cmpsf2>:
    208c:	0e 94 29 11 	call	0x2252	; 0x2252 <__fp_cmp>
    2090:	08 f4       	brcc	.+2      	; 0x2094 <__cmpsf2+0x8>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	08 95       	ret

00002096 <__divsf3>:
    2096:	0e 94 5f 10 	call	0x20be	; 0x20be <__divsf3x>
    209a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_round>
    209e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fp_pscB>
    20a2:	58 f0       	brcs	.+22     	; 0x20ba <__divsf3+0x24>
    20a4:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_pscA>
    20a8:	40 f0       	brcs	.+16     	; 0x20ba <__divsf3+0x24>
    20aa:	29 f4       	brne	.+10     	; 0x20b6 <__divsf3+0x20>
    20ac:	5f 3f       	cpi	r21, 0xFF	; 255
    20ae:	29 f0       	breq	.+10     	; 0x20ba <__divsf3+0x24>
    20b0:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_inf>
    20b4:	51 11       	cpse	r21, r1
    20b6:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__fp_szero>
    20ba:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__fp_nan>

000020be <__divsf3x>:
    20be:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_split3>
    20c2:	68 f3       	brcs	.-38     	; 0x209e <__divsf3+0x8>

000020c4 <__divsf3_pse>:
    20c4:	99 23       	and	r25, r25
    20c6:	b1 f3       	breq	.-20     	; 0x20b4 <__divsf3+0x1e>
    20c8:	55 23       	and	r21, r21
    20ca:	91 f3       	breq	.-28     	; 0x20b0 <__divsf3+0x1a>
    20cc:	95 1b       	sub	r25, r21
    20ce:	55 0b       	sbc	r21, r21
    20d0:	bb 27       	eor	r27, r27
    20d2:	aa 27       	eor	r26, r26
    20d4:	62 17       	cp	r22, r18
    20d6:	73 07       	cpc	r23, r19
    20d8:	84 07       	cpc	r24, r20
    20da:	38 f0       	brcs	.+14     	; 0x20ea <__divsf3_pse+0x26>
    20dc:	9f 5f       	subi	r25, 0xFF	; 255
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	44 1f       	adc	r20, r20
    20e6:	aa 1f       	adc	r26, r26
    20e8:	a9 f3       	breq	.-22     	; 0x20d4 <__divsf3_pse+0x10>
    20ea:	35 d0       	rcall	.+106    	; 0x2156 <__divsf3_pse+0x92>
    20ec:	0e 2e       	mov	r0, r30
    20ee:	3a f0       	brmi	.+14     	; 0x20fe <__divsf3_pse+0x3a>
    20f0:	e0 e8       	ldi	r30, 0x80	; 128
    20f2:	32 d0       	rcall	.+100    	; 0x2158 <__divsf3_pse+0x94>
    20f4:	91 50       	subi	r25, 0x01	; 1
    20f6:	50 40       	sbci	r21, 0x00	; 0
    20f8:	e6 95       	lsr	r30
    20fa:	00 1c       	adc	r0, r0
    20fc:	ca f7       	brpl	.-14     	; 0x20f0 <__divsf3_pse+0x2c>
    20fe:	2b d0       	rcall	.+86     	; 0x2156 <__divsf3_pse+0x92>
    2100:	fe 2f       	mov	r31, r30
    2102:	29 d0       	rcall	.+82     	; 0x2156 <__divsf3_pse+0x92>
    2104:	66 0f       	add	r22, r22
    2106:	77 1f       	adc	r23, r23
    2108:	88 1f       	adc	r24, r24
    210a:	bb 1f       	adc	r27, r27
    210c:	26 17       	cp	r18, r22
    210e:	37 07       	cpc	r19, r23
    2110:	48 07       	cpc	r20, r24
    2112:	ab 07       	cpc	r26, r27
    2114:	b0 e8       	ldi	r27, 0x80	; 128
    2116:	09 f0       	breq	.+2      	; 0x211a <__divsf3_pse+0x56>
    2118:	bb 0b       	sbc	r27, r27
    211a:	80 2d       	mov	r24, r0
    211c:	bf 01       	movw	r22, r30
    211e:	ff 27       	eor	r31, r31
    2120:	93 58       	subi	r25, 0x83	; 131
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	3a f0       	brmi	.+14     	; 0x2134 <__divsf3_pse+0x70>
    2126:	9e 3f       	cpi	r25, 0xFE	; 254
    2128:	51 05       	cpc	r21, r1
    212a:	78 f0       	brcs	.+30     	; 0x214a <__divsf3_pse+0x86>
    212c:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_inf>
    2130:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__fp_szero>
    2134:	5f 3f       	cpi	r21, 0xFF	; 255
    2136:	e4 f3       	brlt	.-8      	; 0x2130 <__divsf3_pse+0x6c>
    2138:	98 3e       	cpi	r25, 0xE8	; 232
    213a:	d4 f3       	brlt	.-12     	; 0x2130 <__divsf3_pse+0x6c>
    213c:	86 95       	lsr	r24
    213e:	77 95       	ror	r23
    2140:	67 95       	ror	r22
    2142:	b7 95       	ror	r27
    2144:	f7 95       	ror	r31
    2146:	9f 5f       	subi	r25, 0xFF	; 255
    2148:	c9 f7       	brne	.-14     	; 0x213c <__divsf3_pse+0x78>
    214a:	88 0f       	add	r24, r24
    214c:	91 1d       	adc	r25, r1
    214e:	96 95       	lsr	r25
    2150:	87 95       	ror	r24
    2152:	97 f9       	bld	r25, 7
    2154:	08 95       	ret
    2156:	e1 e0       	ldi	r30, 0x01	; 1
    2158:	66 0f       	add	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	bb 1f       	adc	r27, r27
    2160:	62 17       	cp	r22, r18
    2162:	73 07       	cpc	r23, r19
    2164:	84 07       	cpc	r24, r20
    2166:	ba 07       	cpc	r27, r26
    2168:	20 f0       	brcs	.+8      	; 0x2172 <__divsf3_pse+0xae>
    216a:	62 1b       	sub	r22, r18
    216c:	73 0b       	sbc	r23, r19
    216e:	84 0b       	sbc	r24, r20
    2170:	ba 0b       	sbc	r27, r26
    2172:	ee 1f       	adc	r30, r30
    2174:	88 f7       	brcc	.-30     	; 0x2158 <__divsf3_pse+0x94>
    2176:	e0 95       	com	r30
    2178:	08 95       	ret

0000217a <__fixunssfsi>:
    217a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__fp_splitA>
    217e:	88 f0       	brcs	.+34     	; 0x21a2 <__fixunssfsi+0x28>
    2180:	9f 57       	subi	r25, 0x7F	; 127
    2182:	98 f0       	brcs	.+38     	; 0x21aa <__fixunssfsi+0x30>
    2184:	b9 2f       	mov	r27, r25
    2186:	99 27       	eor	r25, r25
    2188:	b7 51       	subi	r27, 0x17	; 23
    218a:	b0 f0       	brcs	.+44     	; 0x21b8 <__fixunssfsi+0x3e>
    218c:	e1 f0       	breq	.+56     	; 0x21c6 <__fixunssfsi+0x4c>
    218e:	66 0f       	add	r22, r22
    2190:	77 1f       	adc	r23, r23
    2192:	88 1f       	adc	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	1a f0       	brmi	.+6      	; 0x219e <__fixunssfsi+0x24>
    2198:	ba 95       	dec	r27
    219a:	c9 f7       	brne	.-14     	; 0x218e <__fixunssfsi+0x14>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <__fixunssfsi+0x4c>
    219e:	b1 30       	cpi	r27, 0x01	; 1
    21a0:	91 f0       	breq	.+36     	; 0x21c6 <__fixunssfsi+0x4c>
    21a2:	0e 94 97 11 	call	0x232e	; 0x232e <__fp_zero>
    21a6:	b1 e0       	ldi	r27, 0x01	; 1
    21a8:	08 95       	ret
    21aa:	0c 94 97 11 	jmp	0x232e	; 0x232e <__fp_zero>
    21ae:	67 2f       	mov	r22, r23
    21b0:	78 2f       	mov	r23, r24
    21b2:	88 27       	eor	r24, r24
    21b4:	b8 5f       	subi	r27, 0xF8	; 248
    21b6:	39 f0       	breq	.+14     	; 0x21c6 <__fixunssfsi+0x4c>
    21b8:	b9 3f       	cpi	r27, 0xF9	; 249
    21ba:	cc f3       	brlt	.-14     	; 0x21ae <__fixunssfsi+0x34>
    21bc:	86 95       	lsr	r24
    21be:	77 95       	ror	r23
    21c0:	67 95       	ror	r22
    21c2:	b3 95       	inc	r27
    21c4:	d9 f7       	brne	.-10     	; 0x21bc <__fixunssfsi+0x42>
    21c6:	3e f4       	brtc	.+14     	; 0x21d6 <__fixunssfsi+0x5c>
    21c8:	90 95       	com	r25
    21ca:	80 95       	com	r24
    21cc:	70 95       	com	r23
    21ce:	61 95       	neg	r22
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 4f       	sbci	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	08 95       	ret

000021d8 <__floatunsisf>:
    21d8:	e8 94       	clt
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <__floatsisf+0x12>

000021dc <__floatsisf>:
    21dc:	97 fb       	bst	r25, 7
    21de:	3e f4       	brtc	.+14     	; 0x21ee <__floatsisf+0x12>
    21e0:	90 95       	com	r25
    21e2:	80 95       	com	r24
    21e4:	70 95       	com	r23
    21e6:	61 95       	neg	r22
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	8f 4f       	sbci	r24, 0xFF	; 255
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	99 23       	and	r25, r25
    21f0:	a9 f0       	breq	.+42     	; 0x221c <__floatsisf+0x40>
    21f2:	f9 2f       	mov	r31, r25
    21f4:	96 e9       	ldi	r25, 0x96	; 150
    21f6:	bb 27       	eor	r27, r27
    21f8:	93 95       	inc	r25
    21fa:	f6 95       	lsr	r31
    21fc:	87 95       	ror	r24
    21fe:	77 95       	ror	r23
    2200:	67 95       	ror	r22
    2202:	b7 95       	ror	r27
    2204:	f1 11       	cpse	r31, r1
    2206:	f8 cf       	rjmp	.-16     	; 0x21f8 <__floatsisf+0x1c>
    2208:	fa f4       	brpl	.+62     	; 0x2248 <__floatsisf+0x6c>
    220a:	bb 0f       	add	r27, r27
    220c:	11 f4       	brne	.+4      	; 0x2212 <__floatsisf+0x36>
    220e:	60 ff       	sbrs	r22, 0
    2210:	1b c0       	rjmp	.+54     	; 0x2248 <__floatsisf+0x6c>
    2212:	6f 5f       	subi	r22, 0xFF	; 255
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	8f 4f       	sbci	r24, 0xFF	; 255
    2218:	9f 4f       	sbci	r25, 0xFF	; 255
    221a:	16 c0       	rjmp	.+44     	; 0x2248 <__floatsisf+0x6c>
    221c:	88 23       	and	r24, r24
    221e:	11 f0       	breq	.+4      	; 0x2224 <__floatsisf+0x48>
    2220:	96 e9       	ldi	r25, 0x96	; 150
    2222:	11 c0       	rjmp	.+34     	; 0x2246 <__floatsisf+0x6a>
    2224:	77 23       	and	r23, r23
    2226:	21 f0       	breq	.+8      	; 0x2230 <__floatsisf+0x54>
    2228:	9e e8       	ldi	r25, 0x8E	; 142
    222a:	87 2f       	mov	r24, r23
    222c:	76 2f       	mov	r23, r22
    222e:	05 c0       	rjmp	.+10     	; 0x223a <__floatsisf+0x5e>
    2230:	66 23       	and	r22, r22
    2232:	71 f0       	breq	.+28     	; 0x2250 <__floatsisf+0x74>
    2234:	96 e8       	ldi	r25, 0x86	; 134
    2236:	86 2f       	mov	r24, r22
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	2a f0       	brmi	.+10     	; 0x2248 <__floatsisf+0x6c>
    223e:	9a 95       	dec	r25
    2240:	66 0f       	add	r22, r22
    2242:	77 1f       	adc	r23, r23
    2244:	88 1f       	adc	r24, r24
    2246:	da f7       	brpl	.-10     	; 0x223e <__floatsisf+0x62>
    2248:	88 0f       	add	r24, r24
    224a:	96 95       	lsr	r25
    224c:	87 95       	ror	r24
    224e:	97 f9       	bld	r25, 7
    2250:	08 95       	ret

00002252 <__fp_cmp>:
    2252:	99 0f       	add	r25, r25
    2254:	00 08       	sbc	r0, r0
    2256:	55 0f       	add	r21, r21
    2258:	aa 0b       	sbc	r26, r26
    225a:	e0 e8       	ldi	r30, 0x80	; 128
    225c:	fe ef       	ldi	r31, 0xFE	; 254
    225e:	16 16       	cp	r1, r22
    2260:	17 06       	cpc	r1, r23
    2262:	e8 07       	cpc	r30, r24
    2264:	f9 07       	cpc	r31, r25
    2266:	c0 f0       	brcs	.+48     	; 0x2298 <__fp_cmp+0x46>
    2268:	12 16       	cp	r1, r18
    226a:	13 06       	cpc	r1, r19
    226c:	e4 07       	cpc	r30, r20
    226e:	f5 07       	cpc	r31, r21
    2270:	98 f0       	brcs	.+38     	; 0x2298 <__fp_cmp+0x46>
    2272:	62 1b       	sub	r22, r18
    2274:	73 0b       	sbc	r23, r19
    2276:	84 0b       	sbc	r24, r20
    2278:	95 0b       	sbc	r25, r21
    227a:	39 f4       	brne	.+14     	; 0x228a <__fp_cmp+0x38>
    227c:	0a 26       	eor	r0, r26
    227e:	61 f0       	breq	.+24     	; 0x2298 <__fp_cmp+0x46>
    2280:	23 2b       	or	r18, r19
    2282:	24 2b       	or	r18, r20
    2284:	25 2b       	or	r18, r21
    2286:	21 f4       	brne	.+8      	; 0x2290 <__fp_cmp+0x3e>
    2288:	08 95       	ret
    228a:	0a 26       	eor	r0, r26
    228c:	09 f4       	brne	.+2      	; 0x2290 <__fp_cmp+0x3e>
    228e:	a1 40       	sbci	r26, 0x01	; 1
    2290:	a6 95       	lsr	r26
    2292:	8f ef       	ldi	r24, 0xFF	; 255
    2294:	81 1d       	adc	r24, r1
    2296:	81 1d       	adc	r24, r1
    2298:	08 95       	ret

0000229a <__fp_inf>:
    229a:	97 f9       	bld	r25, 7
    229c:	9f 67       	ori	r25, 0x7F	; 127
    229e:	80 e8       	ldi	r24, 0x80	; 128
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	08 95       	ret

000022a6 <__fp_nan>:
    22a6:	9f ef       	ldi	r25, 0xFF	; 255
    22a8:	80 ec       	ldi	r24, 0xC0	; 192
    22aa:	08 95       	ret

000022ac <__fp_pscA>:
    22ac:	00 24       	eor	r0, r0
    22ae:	0a 94       	dec	r0
    22b0:	16 16       	cp	r1, r22
    22b2:	17 06       	cpc	r1, r23
    22b4:	18 06       	cpc	r1, r24
    22b6:	09 06       	cpc	r0, r25
    22b8:	08 95       	ret

000022ba <__fp_pscB>:
    22ba:	00 24       	eor	r0, r0
    22bc:	0a 94       	dec	r0
    22be:	12 16       	cp	r1, r18
    22c0:	13 06       	cpc	r1, r19
    22c2:	14 06       	cpc	r1, r20
    22c4:	05 06       	cpc	r0, r21
    22c6:	08 95       	ret

000022c8 <__fp_round>:
    22c8:	09 2e       	mov	r0, r25
    22ca:	03 94       	inc	r0
    22cc:	00 0c       	add	r0, r0
    22ce:	11 f4       	brne	.+4      	; 0x22d4 <__fp_round+0xc>
    22d0:	88 23       	and	r24, r24
    22d2:	52 f0       	brmi	.+20     	; 0x22e8 <__fp_round+0x20>
    22d4:	bb 0f       	add	r27, r27
    22d6:	40 f4       	brcc	.+16     	; 0x22e8 <__fp_round+0x20>
    22d8:	bf 2b       	or	r27, r31
    22da:	11 f4       	brne	.+4      	; 0x22e0 <__fp_round+0x18>
    22dc:	60 ff       	sbrs	r22, 0
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <__fp_round+0x20>
    22e0:	6f 5f       	subi	r22, 0xFF	; 255
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	08 95       	ret

000022ea <__fp_split3>:
    22ea:	57 fd       	sbrc	r21, 7
    22ec:	90 58       	subi	r25, 0x80	; 128
    22ee:	44 0f       	add	r20, r20
    22f0:	55 1f       	adc	r21, r21
    22f2:	59 f0       	breq	.+22     	; 0x230a <__fp_splitA+0x10>
    22f4:	5f 3f       	cpi	r21, 0xFF	; 255
    22f6:	71 f0       	breq	.+28     	; 0x2314 <__fp_splitA+0x1a>
    22f8:	47 95       	ror	r20

000022fa <__fp_splitA>:
    22fa:	88 0f       	add	r24, r24
    22fc:	97 fb       	bst	r25, 7
    22fe:	99 1f       	adc	r25, r25
    2300:	61 f0       	breq	.+24     	; 0x231a <__fp_splitA+0x20>
    2302:	9f 3f       	cpi	r25, 0xFF	; 255
    2304:	79 f0       	breq	.+30     	; 0x2324 <__fp_splitA+0x2a>
    2306:	87 95       	ror	r24
    2308:	08 95       	ret
    230a:	12 16       	cp	r1, r18
    230c:	13 06       	cpc	r1, r19
    230e:	14 06       	cpc	r1, r20
    2310:	55 1f       	adc	r21, r21
    2312:	f2 cf       	rjmp	.-28     	; 0x22f8 <__fp_split3+0xe>
    2314:	46 95       	lsr	r20
    2316:	f1 df       	rcall	.-30     	; 0x22fa <__fp_splitA>
    2318:	08 c0       	rjmp	.+16     	; 0x232a <__fp_splitA+0x30>
    231a:	16 16       	cp	r1, r22
    231c:	17 06       	cpc	r1, r23
    231e:	18 06       	cpc	r1, r24
    2320:	99 1f       	adc	r25, r25
    2322:	f1 cf       	rjmp	.-30     	; 0x2306 <__fp_splitA+0xc>
    2324:	86 95       	lsr	r24
    2326:	71 05       	cpc	r23, r1
    2328:	61 05       	cpc	r22, r1
    232a:	08 94       	sec
    232c:	08 95       	ret

0000232e <__fp_zero>:
    232e:	e8 94       	clt

00002330 <__fp_szero>:
    2330:	bb 27       	eor	r27, r27
    2332:	66 27       	eor	r22, r22
    2334:	77 27       	eor	r23, r23
    2336:	cb 01       	movw	r24, r22
    2338:	97 f9       	bld	r25, 7
    233a:	08 95       	ret

0000233c <__gesf2>:
    233c:	0e 94 29 11 	call	0x2252	; 0x2252 <__fp_cmp>
    2340:	08 f4       	brcc	.+2      	; 0x2344 <__gesf2+0x8>
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	08 95       	ret

00002346 <__mulsf3>:
    2346:	0e 94 b6 11 	call	0x236c	; 0x236c <__mulsf3x>
    234a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_round>
    234e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_pscA>
    2352:	38 f0       	brcs	.+14     	; 0x2362 <__mulsf3+0x1c>
    2354:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fp_pscB>
    2358:	20 f0       	brcs	.+8      	; 0x2362 <__mulsf3+0x1c>
    235a:	95 23       	and	r25, r21
    235c:	11 f0       	breq	.+4      	; 0x2362 <__mulsf3+0x1c>
    235e:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_inf>
    2362:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__fp_nan>
    2366:	11 24       	eor	r1, r1
    2368:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__fp_szero>

0000236c <__mulsf3x>:
    236c:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_split3>
    2370:	70 f3       	brcs	.-36     	; 0x234e <__mulsf3+0x8>

00002372 <__mulsf3_pse>:
    2372:	95 9f       	mul	r25, r21
    2374:	c1 f3       	breq	.-16     	; 0x2366 <__mulsf3+0x20>
    2376:	95 0f       	add	r25, r21
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	55 1f       	adc	r21, r21
    237c:	62 9f       	mul	r22, r18
    237e:	f0 01       	movw	r30, r0
    2380:	72 9f       	mul	r23, r18
    2382:	bb 27       	eor	r27, r27
    2384:	f0 0d       	add	r31, r0
    2386:	b1 1d       	adc	r27, r1
    2388:	63 9f       	mul	r22, r19
    238a:	aa 27       	eor	r26, r26
    238c:	f0 0d       	add	r31, r0
    238e:	b1 1d       	adc	r27, r1
    2390:	aa 1f       	adc	r26, r26
    2392:	64 9f       	mul	r22, r20
    2394:	66 27       	eor	r22, r22
    2396:	b0 0d       	add	r27, r0
    2398:	a1 1d       	adc	r26, r1
    239a:	66 1f       	adc	r22, r22
    239c:	82 9f       	mul	r24, r18
    239e:	22 27       	eor	r18, r18
    23a0:	b0 0d       	add	r27, r0
    23a2:	a1 1d       	adc	r26, r1
    23a4:	62 1f       	adc	r22, r18
    23a6:	73 9f       	mul	r23, r19
    23a8:	b0 0d       	add	r27, r0
    23aa:	a1 1d       	adc	r26, r1
    23ac:	62 1f       	adc	r22, r18
    23ae:	83 9f       	mul	r24, r19
    23b0:	a0 0d       	add	r26, r0
    23b2:	61 1d       	adc	r22, r1
    23b4:	22 1f       	adc	r18, r18
    23b6:	74 9f       	mul	r23, r20
    23b8:	33 27       	eor	r19, r19
    23ba:	a0 0d       	add	r26, r0
    23bc:	61 1d       	adc	r22, r1
    23be:	23 1f       	adc	r18, r19
    23c0:	84 9f       	mul	r24, r20
    23c2:	60 0d       	add	r22, r0
    23c4:	21 1d       	adc	r18, r1
    23c6:	82 2f       	mov	r24, r18
    23c8:	76 2f       	mov	r23, r22
    23ca:	6a 2f       	mov	r22, r26
    23cc:	11 24       	eor	r1, r1
    23ce:	9f 57       	subi	r25, 0x7F	; 127
    23d0:	50 40       	sbci	r21, 0x00	; 0
    23d2:	9a f0       	brmi	.+38     	; 0x23fa <__mulsf3_pse+0x88>
    23d4:	f1 f0       	breq	.+60     	; 0x2412 <__mulsf3_pse+0xa0>
    23d6:	88 23       	and	r24, r24
    23d8:	4a f0       	brmi	.+18     	; 0x23ec <__mulsf3_pse+0x7a>
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	bb 1f       	adc	r27, r27
    23e0:	66 1f       	adc	r22, r22
    23e2:	77 1f       	adc	r23, r23
    23e4:	88 1f       	adc	r24, r24
    23e6:	91 50       	subi	r25, 0x01	; 1
    23e8:	50 40       	sbci	r21, 0x00	; 0
    23ea:	a9 f7       	brne	.-22     	; 0x23d6 <__mulsf3_pse+0x64>
    23ec:	9e 3f       	cpi	r25, 0xFE	; 254
    23ee:	51 05       	cpc	r21, r1
    23f0:	80 f0       	brcs	.+32     	; 0x2412 <__mulsf3_pse+0xa0>
    23f2:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_inf>
    23f6:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__fp_szero>
    23fa:	5f 3f       	cpi	r21, 0xFF	; 255
    23fc:	e4 f3       	brlt	.-8      	; 0x23f6 <__mulsf3_pse+0x84>
    23fe:	98 3e       	cpi	r25, 0xE8	; 232
    2400:	d4 f3       	brlt	.-12     	; 0x23f6 <__mulsf3_pse+0x84>
    2402:	86 95       	lsr	r24
    2404:	77 95       	ror	r23
    2406:	67 95       	ror	r22
    2408:	b7 95       	ror	r27
    240a:	f7 95       	ror	r31
    240c:	e7 95       	ror	r30
    240e:	9f 5f       	subi	r25, 0xFF	; 255
    2410:	c1 f7       	brne	.-16     	; 0x2402 <__mulsf3_pse+0x90>
    2412:	fe 2b       	or	r31, r30
    2414:	88 0f       	add	r24, r24
    2416:	91 1d       	adc	r25, r1
    2418:	96 95       	lsr	r25
    241a:	87 95       	ror	r24
    241c:	97 f9       	bld	r25, 7
    241e:	08 95       	ret

00002420 <round>:
    2420:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__fp_splitA>
    2424:	e8 f0       	brcs	.+58     	; 0x2460 <round+0x40>
    2426:	9e 37       	cpi	r25, 0x7E	; 126
    2428:	e8 f0       	brcs	.+58     	; 0x2464 <round+0x44>
    242a:	96 39       	cpi	r25, 0x96	; 150
    242c:	b8 f4       	brcc	.+46     	; 0x245c <round+0x3c>
    242e:	9e 38       	cpi	r25, 0x8E	; 142
    2430:	48 f4       	brcc	.+18     	; 0x2444 <round+0x24>
    2432:	67 2f       	mov	r22, r23
    2434:	78 2f       	mov	r23, r24
    2436:	88 27       	eor	r24, r24
    2438:	98 5f       	subi	r25, 0xF8	; 248
    243a:	f9 cf       	rjmp	.-14     	; 0x242e <round+0xe>
    243c:	86 95       	lsr	r24
    243e:	77 95       	ror	r23
    2440:	67 95       	ror	r22
    2442:	93 95       	inc	r25
    2444:	95 39       	cpi	r25, 0x95	; 149
    2446:	d0 f3       	brcs	.-12     	; 0x243c <round+0x1c>
    2448:	b6 2f       	mov	r27, r22
    244a:	b1 70       	andi	r27, 0x01	; 1
    244c:	6b 0f       	add	r22, r27
    244e:	71 1d       	adc	r23, r1
    2450:	81 1d       	adc	r24, r1
    2452:	20 f4       	brcc	.+8      	; 0x245c <round+0x3c>
    2454:	87 95       	ror	r24
    2456:	77 95       	ror	r23
    2458:	67 95       	ror	r22
    245a:	93 95       	inc	r25
    245c:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_mintl>
    2460:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_mpack>
    2464:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__fp_szero>

00002468 <__fp_mintl>:
    2468:	88 23       	and	r24, r24
    246a:	71 f4       	brne	.+28     	; 0x2488 <__fp_mintl+0x20>
    246c:	77 23       	and	r23, r23
    246e:	21 f0       	breq	.+8      	; 0x2478 <__fp_mintl+0x10>
    2470:	98 50       	subi	r25, 0x08	; 8
    2472:	87 2b       	or	r24, r23
    2474:	76 2f       	mov	r23, r22
    2476:	07 c0       	rjmp	.+14     	; 0x2486 <__fp_mintl+0x1e>
    2478:	66 23       	and	r22, r22
    247a:	11 f4       	brne	.+4      	; 0x2480 <__fp_mintl+0x18>
    247c:	99 27       	eor	r25, r25
    247e:	0d c0       	rjmp	.+26     	; 0x249a <__fp_mintl+0x32>
    2480:	90 51       	subi	r25, 0x10	; 16
    2482:	86 2b       	or	r24, r22
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	2a f0       	brmi	.+10     	; 0x2494 <__fp_mintl+0x2c>
    248a:	9a 95       	dec	r25
    248c:	66 0f       	add	r22, r22
    248e:	77 1f       	adc	r23, r23
    2490:	88 1f       	adc	r24, r24
    2492:	da f7       	brpl	.-10     	; 0x248a <__fp_mintl+0x22>
    2494:	88 0f       	add	r24, r24
    2496:	96 95       	lsr	r25
    2498:	87 95       	ror	r24
    249a:	97 f9       	bld	r25, 7
    249c:	08 95       	ret

0000249e <__fp_mpack>:
    249e:	9f 3f       	cpi	r25, 0xFF	; 255
    24a0:	31 f0       	breq	.+12     	; 0x24ae <__fp_mpack_finite+0xc>

000024a2 <__fp_mpack_finite>:
    24a2:	91 50       	subi	r25, 0x01	; 1
    24a4:	20 f4       	brcc	.+8      	; 0x24ae <__fp_mpack_finite+0xc>
    24a6:	87 95       	ror	r24
    24a8:	77 95       	ror	r23
    24aa:	67 95       	ror	r22
    24ac:	b7 95       	ror	r27
    24ae:	88 0f       	add	r24, r24
    24b0:	91 1d       	adc	r25, r1
    24b2:	96 95       	lsr	r25
    24b4:	87 95       	ror	r24
    24b6:	97 f9       	bld	r25, 7
    24b8:	08 95       	ret

000024ba <vfprintf>:
    24ba:	a0 e1       	ldi	r26, 0x10	; 16
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e3 e6       	ldi	r30, 0x63	; 99
    24c0:	f2 e1       	ldi	r31, 0x12	; 18
    24c2:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__>
    24c6:	7c 01       	movw	r14, r24
    24c8:	1b 01       	movw	r2, r22
    24ca:	6a 01       	movw	r12, r20
    24cc:	fc 01       	movw	r30, r24
    24ce:	17 82       	std	Z+7, r1	; 0x07
    24d0:	16 82       	std	Z+6, r1	; 0x06
    24d2:	83 81       	ldd	r24, Z+3	; 0x03
    24d4:	81 ff       	sbrs	r24, 1
    24d6:	44 c3       	rjmp	.+1672   	; 0x2b60 <vfprintf+0x6a6>
    24d8:	9e 01       	movw	r18, r28
    24da:	2f 5f       	subi	r18, 0xFF	; 255
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	39 01       	movw	r6, r18
    24e0:	f7 01       	movw	r30, r14
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	f1 01       	movw	r30, r2
    24e6:	93 fd       	sbrc	r25, 3
    24e8:	85 91       	lpm	r24, Z+
    24ea:	93 ff       	sbrs	r25, 3
    24ec:	81 91       	ld	r24, Z+
    24ee:	1f 01       	movw	r2, r30
    24f0:	88 23       	and	r24, r24
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <vfprintf+0x3c>
    24f4:	31 c3       	rjmp	.+1634   	; 0x2b58 <vfprintf+0x69e>
    24f6:	85 32       	cpi	r24, 0x25	; 37
    24f8:	39 f4       	brne	.+14     	; 0x2508 <vfprintf+0x4e>
    24fa:	93 fd       	sbrc	r25, 3
    24fc:	85 91       	lpm	r24, Z+
    24fe:	93 ff       	sbrs	r25, 3
    2500:	81 91       	ld	r24, Z+
    2502:	1f 01       	movw	r2, r30
    2504:	85 32       	cpi	r24, 0x25	; 37
    2506:	39 f4       	brne	.+14     	; 0x2516 <vfprintf+0x5c>
    2508:	b7 01       	movw	r22, r14
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2510:	56 01       	movw	r10, r12
    2512:	65 01       	movw	r12, r10
    2514:	e5 cf       	rjmp	.-54     	; 0x24e0 <vfprintf+0x26>
    2516:	10 e0       	ldi	r17, 0x00	; 0
    2518:	51 2c       	mov	r5, r1
    251a:	91 2c       	mov	r9, r1
    251c:	ff e1       	ldi	r31, 0x1F	; 31
    251e:	f9 15       	cp	r31, r9
    2520:	d8 f0       	brcs	.+54     	; 0x2558 <vfprintf+0x9e>
    2522:	8b 32       	cpi	r24, 0x2B	; 43
    2524:	79 f0       	breq	.+30     	; 0x2544 <vfprintf+0x8a>
    2526:	38 f4       	brcc	.+14     	; 0x2536 <vfprintf+0x7c>
    2528:	80 32       	cpi	r24, 0x20	; 32
    252a:	79 f0       	breq	.+30     	; 0x254a <vfprintf+0x90>
    252c:	83 32       	cpi	r24, 0x23	; 35
    252e:	a1 f4       	brne	.+40     	; 0x2558 <vfprintf+0x9e>
    2530:	f9 2d       	mov	r31, r9
    2532:	f0 61       	ori	r31, 0x10	; 16
    2534:	2e c0       	rjmp	.+92     	; 0x2592 <vfprintf+0xd8>
    2536:	8d 32       	cpi	r24, 0x2D	; 45
    2538:	61 f0       	breq	.+24     	; 0x2552 <vfprintf+0x98>
    253a:	80 33       	cpi	r24, 0x30	; 48
    253c:	69 f4       	brne	.+26     	; 0x2558 <vfprintf+0x9e>
    253e:	29 2d       	mov	r18, r9
    2540:	21 60       	ori	r18, 0x01	; 1
    2542:	2d c0       	rjmp	.+90     	; 0x259e <vfprintf+0xe4>
    2544:	39 2d       	mov	r19, r9
    2546:	32 60       	ori	r19, 0x02	; 2
    2548:	93 2e       	mov	r9, r19
    254a:	89 2d       	mov	r24, r9
    254c:	84 60       	ori	r24, 0x04	; 4
    254e:	98 2e       	mov	r9, r24
    2550:	2a c0       	rjmp	.+84     	; 0x25a6 <vfprintf+0xec>
    2552:	e9 2d       	mov	r30, r9
    2554:	e8 60       	ori	r30, 0x08	; 8
    2556:	15 c0       	rjmp	.+42     	; 0x2582 <vfprintf+0xc8>
    2558:	97 fc       	sbrc	r9, 7
    255a:	2d c0       	rjmp	.+90     	; 0x25b6 <vfprintf+0xfc>
    255c:	20 ed       	ldi	r18, 0xD0	; 208
    255e:	28 0f       	add	r18, r24
    2560:	2a 30       	cpi	r18, 0x0A	; 10
    2562:	88 f4       	brcc	.+34     	; 0x2586 <vfprintf+0xcc>
    2564:	96 fe       	sbrs	r9, 6
    2566:	06 c0       	rjmp	.+12     	; 0x2574 <vfprintf+0xba>
    2568:	3a e0       	ldi	r19, 0x0A	; 10
    256a:	13 9f       	mul	r17, r19
    256c:	20 0d       	add	r18, r0
    256e:	11 24       	eor	r1, r1
    2570:	12 2f       	mov	r17, r18
    2572:	19 c0       	rjmp	.+50     	; 0x25a6 <vfprintf+0xec>
    2574:	8a e0       	ldi	r24, 0x0A	; 10
    2576:	58 9e       	mul	r5, r24
    2578:	20 0d       	add	r18, r0
    257a:	11 24       	eor	r1, r1
    257c:	52 2e       	mov	r5, r18
    257e:	e9 2d       	mov	r30, r9
    2580:	e0 62       	ori	r30, 0x20	; 32
    2582:	9e 2e       	mov	r9, r30
    2584:	10 c0       	rjmp	.+32     	; 0x25a6 <vfprintf+0xec>
    2586:	8e 32       	cpi	r24, 0x2E	; 46
    2588:	31 f4       	brne	.+12     	; 0x2596 <vfprintf+0xdc>
    258a:	96 fc       	sbrc	r9, 6
    258c:	e5 c2       	rjmp	.+1482   	; 0x2b58 <vfprintf+0x69e>
    258e:	f9 2d       	mov	r31, r9
    2590:	f0 64       	ori	r31, 0x40	; 64
    2592:	9f 2e       	mov	r9, r31
    2594:	08 c0       	rjmp	.+16     	; 0x25a6 <vfprintf+0xec>
    2596:	8c 36       	cpi	r24, 0x6C	; 108
    2598:	21 f4       	brne	.+8      	; 0x25a2 <vfprintf+0xe8>
    259a:	29 2d       	mov	r18, r9
    259c:	20 68       	ori	r18, 0x80	; 128
    259e:	92 2e       	mov	r9, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <vfprintf+0xec>
    25a2:	88 36       	cpi	r24, 0x68	; 104
    25a4:	41 f4       	brne	.+16     	; 0x25b6 <vfprintf+0xfc>
    25a6:	f1 01       	movw	r30, r2
    25a8:	93 fd       	sbrc	r25, 3
    25aa:	85 91       	lpm	r24, Z+
    25ac:	93 ff       	sbrs	r25, 3
    25ae:	81 91       	ld	r24, Z+
    25b0:	1f 01       	movw	r2, r30
    25b2:	81 11       	cpse	r24, r1
    25b4:	b3 cf       	rjmp	.-154    	; 0x251c <vfprintf+0x62>
    25b6:	9b eb       	ldi	r25, 0xBB	; 187
    25b8:	98 0f       	add	r25, r24
    25ba:	93 30       	cpi	r25, 0x03	; 3
    25bc:	20 f4       	brcc	.+8      	; 0x25c6 <vfprintf+0x10c>
    25be:	99 2d       	mov	r25, r9
    25c0:	90 61       	ori	r25, 0x10	; 16
    25c2:	80 5e       	subi	r24, 0xE0	; 224
    25c4:	07 c0       	rjmp	.+14     	; 0x25d4 <vfprintf+0x11a>
    25c6:	9b e9       	ldi	r25, 0x9B	; 155
    25c8:	98 0f       	add	r25, r24
    25ca:	93 30       	cpi	r25, 0x03	; 3
    25cc:	08 f0       	brcs	.+2      	; 0x25d0 <vfprintf+0x116>
    25ce:	66 c1       	rjmp	.+716    	; 0x289c <vfprintf+0x3e2>
    25d0:	99 2d       	mov	r25, r9
    25d2:	9f 7e       	andi	r25, 0xEF	; 239
    25d4:	96 ff       	sbrs	r25, 6
    25d6:	16 e0       	ldi	r17, 0x06	; 6
    25d8:	9f 73       	andi	r25, 0x3F	; 63
    25da:	99 2e       	mov	r9, r25
    25dc:	85 36       	cpi	r24, 0x65	; 101
    25de:	19 f4       	brne	.+6      	; 0x25e6 <vfprintf+0x12c>
    25e0:	90 64       	ori	r25, 0x40	; 64
    25e2:	99 2e       	mov	r9, r25
    25e4:	08 c0       	rjmp	.+16     	; 0x25f6 <vfprintf+0x13c>
    25e6:	86 36       	cpi	r24, 0x66	; 102
    25e8:	21 f4       	brne	.+8      	; 0x25f2 <vfprintf+0x138>
    25ea:	39 2f       	mov	r19, r25
    25ec:	30 68       	ori	r19, 0x80	; 128
    25ee:	93 2e       	mov	r9, r19
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <vfprintf+0x13c>
    25f2:	11 11       	cpse	r17, r1
    25f4:	11 50       	subi	r17, 0x01	; 1
    25f6:	97 fe       	sbrs	r9, 7
    25f8:	07 c0       	rjmp	.+14     	; 0x2608 <vfprintf+0x14e>
    25fa:	1c 33       	cpi	r17, 0x3C	; 60
    25fc:	50 f4       	brcc	.+20     	; 0x2612 <vfprintf+0x158>
    25fe:	44 24       	eor	r4, r4
    2600:	43 94       	inc	r4
    2602:	41 0e       	add	r4, r17
    2604:	27 e0       	ldi	r18, 0x07	; 7
    2606:	0b c0       	rjmp	.+22     	; 0x261e <vfprintf+0x164>
    2608:	18 30       	cpi	r17, 0x08	; 8
    260a:	38 f0       	brcs	.+14     	; 0x261a <vfprintf+0x160>
    260c:	27 e0       	ldi	r18, 0x07	; 7
    260e:	17 e0       	ldi	r17, 0x07	; 7
    2610:	05 c0       	rjmp	.+10     	; 0x261c <vfprintf+0x162>
    2612:	27 e0       	ldi	r18, 0x07	; 7
    2614:	9c e3       	ldi	r25, 0x3C	; 60
    2616:	49 2e       	mov	r4, r25
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vfprintf+0x164>
    261a:	21 2f       	mov	r18, r17
    261c:	41 2c       	mov	r4, r1
    261e:	56 01       	movw	r10, r12
    2620:	84 e0       	ldi	r24, 0x04	; 4
    2622:	a8 0e       	add	r10, r24
    2624:	b1 1c       	adc	r11, r1
    2626:	f6 01       	movw	r30, r12
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	04 2d       	mov	r16, r4
    2632:	a3 01       	movw	r20, r6
    2634:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__ftoa_engine>
    2638:	6c 01       	movw	r12, r24
    263a:	f9 81       	ldd	r31, Y+1	; 0x01
    263c:	fc 87       	std	Y+12, r31	; 0x0c
    263e:	f0 ff       	sbrs	r31, 0
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <vfprintf+0x18c>
    2642:	f3 ff       	sbrs	r31, 3
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <vfprintf+0x198>
    2646:	91 fc       	sbrc	r9, 1
    2648:	06 c0       	rjmp	.+12     	; 0x2656 <vfprintf+0x19c>
    264a:	92 fe       	sbrs	r9, 2
    264c:	06 c0       	rjmp	.+12     	; 0x265a <vfprintf+0x1a0>
    264e:	00 e2       	ldi	r16, 0x20	; 32
    2650:	05 c0       	rjmp	.+10     	; 0x265c <vfprintf+0x1a2>
    2652:	0d e2       	ldi	r16, 0x2D	; 45
    2654:	03 c0       	rjmp	.+6      	; 0x265c <vfprintf+0x1a2>
    2656:	0b e2       	ldi	r16, 0x2B	; 43
    2658:	01 c0       	rjmp	.+2      	; 0x265c <vfprintf+0x1a2>
    265a:	00 e0       	ldi	r16, 0x00	; 0
    265c:	8c 85       	ldd	r24, Y+12	; 0x0c
    265e:	8c 70       	andi	r24, 0x0C	; 12
    2660:	19 f0       	breq	.+6      	; 0x2668 <vfprintf+0x1ae>
    2662:	01 11       	cpse	r16, r1
    2664:	5a c2       	rjmp	.+1204   	; 0x2b1a <vfprintf+0x660>
    2666:	9b c2       	rjmp	.+1334   	; 0x2b9e <vfprintf+0x6e4>
    2668:	97 fe       	sbrs	r9, 7
    266a:	10 c0       	rjmp	.+32     	; 0x268c <vfprintf+0x1d2>
    266c:	4c 0c       	add	r4, r12
    266e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2670:	f4 ff       	sbrs	r31, 4
    2672:	04 c0       	rjmp	.+8      	; 0x267c <vfprintf+0x1c2>
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	81 33       	cpi	r24, 0x31	; 49
    2678:	09 f4       	brne	.+2      	; 0x267c <vfprintf+0x1c2>
    267a:	4a 94       	dec	r4
    267c:	14 14       	cp	r1, r4
    267e:	74 f5       	brge	.+92     	; 0x26dc <vfprintf+0x222>
    2680:	28 e0       	ldi	r18, 0x08	; 8
    2682:	24 15       	cp	r18, r4
    2684:	78 f5       	brcc	.+94     	; 0x26e4 <vfprintf+0x22a>
    2686:	88 e0       	ldi	r24, 0x08	; 8
    2688:	48 2e       	mov	r4, r24
    268a:	2c c0       	rjmp	.+88     	; 0x26e4 <vfprintf+0x22a>
    268c:	96 fc       	sbrc	r9, 6
    268e:	2a c0       	rjmp	.+84     	; 0x26e4 <vfprintf+0x22a>
    2690:	81 2f       	mov	r24, r17
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	8c 15       	cp	r24, r12
    2696:	9d 05       	cpc	r25, r13
    2698:	9c f0       	brlt	.+38     	; 0x26c0 <vfprintf+0x206>
    269a:	3c ef       	ldi	r19, 0xFC	; 252
    269c:	c3 16       	cp	r12, r19
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	d3 06       	cpc	r13, r19
    26a2:	74 f0       	brlt	.+28     	; 0x26c0 <vfprintf+0x206>
    26a4:	89 2d       	mov	r24, r9
    26a6:	80 68       	ori	r24, 0x80	; 128
    26a8:	98 2e       	mov	r9, r24
    26aa:	0a c0       	rjmp	.+20     	; 0x26c0 <vfprintf+0x206>
    26ac:	e2 e0       	ldi	r30, 0x02	; 2
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	ec 0f       	add	r30, r28
    26b2:	fd 1f       	adc	r31, r29
    26b4:	e1 0f       	add	r30, r17
    26b6:	f1 1d       	adc	r31, r1
    26b8:	80 81       	ld	r24, Z
    26ba:	80 33       	cpi	r24, 0x30	; 48
    26bc:	19 f4       	brne	.+6      	; 0x26c4 <vfprintf+0x20a>
    26be:	11 50       	subi	r17, 0x01	; 1
    26c0:	11 11       	cpse	r17, r1
    26c2:	f4 cf       	rjmp	.-24     	; 0x26ac <vfprintf+0x1f2>
    26c4:	97 fe       	sbrs	r9, 7
    26c6:	0e c0       	rjmp	.+28     	; 0x26e4 <vfprintf+0x22a>
    26c8:	44 24       	eor	r4, r4
    26ca:	43 94       	inc	r4
    26cc:	41 0e       	add	r4, r17
    26ce:	81 2f       	mov	r24, r17
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	c8 16       	cp	r12, r24
    26d4:	d9 06       	cpc	r13, r25
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <vfprintf+0x228>
    26d8:	1c 19       	sub	r17, r12
    26da:	04 c0       	rjmp	.+8      	; 0x26e4 <vfprintf+0x22a>
    26dc:	44 24       	eor	r4, r4
    26de:	43 94       	inc	r4
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <vfprintf+0x22a>
    26e2:	10 e0       	ldi	r17, 0x00	; 0
    26e4:	97 fe       	sbrs	r9, 7
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <vfprintf+0x23a>
    26e8:	1c 14       	cp	r1, r12
    26ea:	1d 04       	cpc	r1, r13
    26ec:	34 f4       	brge	.+12     	; 0x26fa <vfprintf+0x240>
    26ee:	c6 01       	movw	r24, r12
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <vfprintf+0x244>
    26f4:	85 e0       	ldi	r24, 0x05	; 5
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <vfprintf+0x244>
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	01 11       	cpse	r16, r1
    2700:	01 96       	adiw	r24, 0x01	; 1
    2702:	11 23       	and	r17, r17
    2704:	31 f0       	breq	.+12     	; 0x2712 <vfprintf+0x258>
    2706:	21 2f       	mov	r18, r17
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	2f 5f       	subi	r18, 0xFF	; 255
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	82 0f       	add	r24, r18
    2710:	93 1f       	adc	r25, r19
    2712:	25 2d       	mov	r18, r5
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	82 17       	cp	r24, r18
    2718:	93 07       	cpc	r25, r19
    271a:	14 f4       	brge	.+4      	; 0x2720 <vfprintf+0x266>
    271c:	58 1a       	sub	r5, r24
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <vfprintf+0x268>
    2720:	51 2c       	mov	r5, r1
    2722:	89 2d       	mov	r24, r9
    2724:	89 70       	andi	r24, 0x09	; 9
    2726:	49 f4       	brne	.+18     	; 0x273a <vfprintf+0x280>
    2728:	55 20       	and	r5, r5
    272a:	39 f0       	breq	.+14     	; 0x273a <vfprintf+0x280>
    272c:	b7 01       	movw	r22, r14
    272e:	80 e2       	ldi	r24, 0x20	; 32
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2736:	5a 94       	dec	r5
    2738:	f7 cf       	rjmp	.-18     	; 0x2728 <vfprintf+0x26e>
    273a:	00 23       	and	r16, r16
    273c:	29 f0       	breq	.+10     	; 0x2748 <vfprintf+0x28e>
    273e:	b7 01       	movw	r22, r14
    2740:	80 2f       	mov	r24, r16
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2748:	93 fc       	sbrc	r9, 3
    274a:	09 c0       	rjmp	.+18     	; 0x275e <vfprintf+0x2a4>
    274c:	55 20       	and	r5, r5
    274e:	39 f0       	breq	.+14     	; 0x275e <vfprintf+0x2a4>
    2750:	b7 01       	movw	r22, r14
    2752:	80 e3       	ldi	r24, 0x30	; 48
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    275a:	5a 94       	dec	r5
    275c:	f7 cf       	rjmp	.-18     	; 0x274c <vfprintf+0x292>
    275e:	97 fe       	sbrs	r9, 7
    2760:	4c c0       	rjmp	.+152    	; 0x27fa <vfprintf+0x340>
    2762:	46 01       	movw	r8, r12
    2764:	d7 fe       	sbrs	r13, 7
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0x2b2>
    2768:	81 2c       	mov	r8, r1
    276a:	91 2c       	mov	r9, r1
    276c:	c6 01       	movw	r24, r12
    276e:	88 19       	sub	r24, r8
    2770:	99 09       	sbc	r25, r9
    2772:	f3 01       	movw	r30, r6
    2774:	e8 0f       	add	r30, r24
    2776:	f9 1f       	adc	r31, r25
    2778:	fe 87       	std	Y+14, r31	; 0x0e
    277a:	ed 87       	std	Y+13, r30	; 0x0d
    277c:	96 01       	movw	r18, r12
    277e:	24 19       	sub	r18, r4
    2780:	31 09       	sbc	r19, r1
    2782:	38 8b       	std	Y+16, r19	; 0x10
    2784:	2f 87       	std	Y+15, r18	; 0x0f
    2786:	01 2f       	mov	r16, r17
    2788:	10 e0       	ldi	r17, 0x00	; 0
    278a:	11 95       	neg	r17
    278c:	01 95       	neg	r16
    278e:	11 09       	sbc	r17, r1
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	83 16       	cp	r8, r19
    2794:	93 06       	cpc	r9, r19
    2796:	29 f4       	brne	.+10     	; 0x27a2 <vfprintf+0x2e8>
    2798:	b7 01       	movw	r22, r14
    279a:	8e e2       	ldi	r24, 0x2E	; 46
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    27a2:	c8 14       	cp	r12, r8
    27a4:	d9 04       	cpc	r13, r9
    27a6:	4c f0       	brlt	.+18     	; 0x27ba <vfprintf+0x300>
    27a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27aa:	98 89       	ldd	r25, Y+16	; 0x10
    27ac:	88 15       	cp	r24, r8
    27ae:	99 05       	cpc	r25, r9
    27b0:	24 f4       	brge	.+8      	; 0x27ba <vfprintf+0x300>
    27b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    27b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    27b6:	81 81       	ldd	r24, Z+1	; 0x01
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <vfprintf+0x302>
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	f1 e0       	ldi	r31, 0x01	; 1
    27be:	8f 1a       	sub	r8, r31
    27c0:	91 08       	sbc	r9, r1
    27c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    27c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    27c6:	2f 5f       	subi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	3e 87       	std	Y+14, r19	; 0x0e
    27cc:	2d 87       	std	Y+13, r18	; 0x0d
    27ce:	80 16       	cp	r8, r16
    27d0:	91 06       	cpc	r9, r17
    27d2:	2c f0       	brlt	.+10     	; 0x27de <vfprintf+0x324>
    27d4:	b7 01       	movw	r22, r14
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    27dc:	d9 cf       	rjmp	.-78     	; 0x2790 <vfprintf+0x2d6>
    27de:	c8 14       	cp	r12, r8
    27e0:	d9 04       	cpc	r13, r9
    27e2:	41 f4       	brne	.+16     	; 0x27f4 <vfprintf+0x33a>
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	96 33       	cpi	r25, 0x36	; 54
    27e8:	20 f4       	brcc	.+8      	; 0x27f2 <vfprintf+0x338>
    27ea:	95 33       	cpi	r25, 0x35	; 53
    27ec:	19 f4       	brne	.+6      	; 0x27f4 <vfprintf+0x33a>
    27ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    27f0:	34 ff       	sbrs	r19, 4
    27f2:	81 e3       	ldi	r24, 0x31	; 49
    27f4:	b7 01       	movw	r22, r14
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	4e c0       	rjmp	.+156    	; 0x2896 <vfprintf+0x3dc>
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	81 33       	cpi	r24, 0x31	; 49
    27fe:	19 f0       	breq	.+6      	; 0x2806 <vfprintf+0x34c>
    2800:	9c 85       	ldd	r25, Y+12	; 0x0c
    2802:	9f 7e       	andi	r25, 0xEF	; 239
    2804:	9c 87       	std	Y+12, r25	; 0x0c
    2806:	b7 01       	movw	r22, r14
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    280e:	11 11       	cpse	r17, r1
    2810:	05 c0       	rjmp	.+10     	; 0x281c <vfprintf+0x362>
    2812:	94 fc       	sbrc	r9, 4
    2814:	18 c0       	rjmp	.+48     	; 0x2846 <vfprintf+0x38c>
    2816:	85 e6       	ldi	r24, 0x65	; 101
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	17 c0       	rjmp	.+46     	; 0x284a <vfprintf+0x390>
    281c:	b7 01       	movw	r22, r14
    281e:	8e e2       	ldi	r24, 0x2E	; 46
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2826:	1e 5f       	subi	r17, 0xFE	; 254
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	01 e0       	ldi	r16, 0x01	; 1
    282c:	08 0f       	add	r16, r24
    282e:	f3 01       	movw	r30, r6
    2830:	e8 0f       	add	r30, r24
    2832:	f1 1d       	adc	r31, r1
    2834:	80 81       	ld	r24, Z
    2836:	b7 01       	movw	r22, r14
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    283e:	80 2f       	mov	r24, r16
    2840:	01 13       	cpse	r16, r17
    2842:	f3 cf       	rjmp	.-26     	; 0x282a <vfprintf+0x370>
    2844:	e6 cf       	rjmp	.-52     	; 0x2812 <vfprintf+0x358>
    2846:	85 e4       	ldi	r24, 0x45	; 69
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	b7 01       	movw	r22, r14
    284c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2850:	d7 fc       	sbrc	r13, 7
    2852:	06 c0       	rjmp	.+12     	; 0x2860 <vfprintf+0x3a6>
    2854:	c1 14       	cp	r12, r1
    2856:	d1 04       	cpc	r13, r1
    2858:	41 f4       	brne	.+16     	; 0x286a <vfprintf+0x3b0>
    285a:	ec 85       	ldd	r30, Y+12	; 0x0c
    285c:	e4 ff       	sbrs	r30, 4
    285e:	05 c0       	rjmp	.+10     	; 0x286a <vfprintf+0x3b0>
    2860:	d1 94       	neg	r13
    2862:	c1 94       	neg	r12
    2864:	d1 08       	sbc	r13, r1
    2866:	8d e2       	ldi	r24, 0x2D	; 45
    2868:	01 c0       	rjmp	.+2      	; 0x286c <vfprintf+0x3b2>
    286a:	8b e2       	ldi	r24, 0x2B	; 43
    286c:	b7 01       	movw	r22, r14
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2874:	80 e3       	ldi	r24, 0x30	; 48
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	c2 16       	cp	r12, r18
    287a:	d1 04       	cpc	r13, r1
    287c:	2c f0       	brlt	.+10     	; 0x2888 <vfprintf+0x3ce>
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	fa e0       	ldi	r31, 0x0A	; 10
    2882:	cf 1a       	sub	r12, r31
    2884:	d1 08       	sbc	r13, r1
    2886:	f7 cf       	rjmp	.-18     	; 0x2876 <vfprintf+0x3bc>
    2888:	b7 01       	movw	r22, r14
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2890:	b7 01       	movw	r22, r14
    2892:	c6 01       	movw	r24, r12
    2894:	c0 96       	adiw	r24, 0x30	; 48
    2896:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    289a:	54 c1       	rjmp	.+680    	; 0x2b44 <vfprintf+0x68a>
    289c:	83 36       	cpi	r24, 0x63	; 99
    289e:	31 f0       	breq	.+12     	; 0x28ac <vfprintf+0x3f2>
    28a0:	83 37       	cpi	r24, 0x73	; 115
    28a2:	79 f0       	breq	.+30     	; 0x28c2 <vfprintf+0x408>
    28a4:	83 35       	cpi	r24, 0x53	; 83
    28a6:	09 f0       	breq	.+2      	; 0x28aa <vfprintf+0x3f0>
    28a8:	56 c0       	rjmp	.+172    	; 0x2956 <vfprintf+0x49c>
    28aa:	20 c0       	rjmp	.+64     	; 0x28ec <vfprintf+0x432>
    28ac:	56 01       	movw	r10, r12
    28ae:	32 e0       	ldi	r19, 0x02	; 2
    28b0:	a3 0e       	add	r10, r19
    28b2:	b1 1c       	adc	r11, r1
    28b4:	f6 01       	movw	r30, r12
    28b6:	80 81       	ld	r24, Z
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	01 e0       	ldi	r16, 0x01	; 1
    28bc:	10 e0       	ldi	r17, 0x00	; 0
    28be:	63 01       	movw	r12, r6
    28c0:	12 c0       	rjmp	.+36     	; 0x28e6 <vfprintf+0x42c>
    28c2:	56 01       	movw	r10, r12
    28c4:	f2 e0       	ldi	r31, 0x02	; 2
    28c6:	af 0e       	add	r10, r31
    28c8:	b1 1c       	adc	r11, r1
    28ca:	f6 01       	movw	r30, r12
    28cc:	c0 80       	ld	r12, Z
    28ce:	d1 80       	ldd	r13, Z+1	; 0x01
    28d0:	96 fe       	sbrs	r9, 6
    28d2:	03 c0       	rjmp	.+6      	; 0x28da <vfprintf+0x420>
    28d4:	61 2f       	mov	r22, r17
    28d6:	70 e0       	ldi	r23, 0x00	; 0
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x424>
    28da:	6f ef       	ldi	r22, 0xFF	; 255
    28dc:	7f ef       	ldi	r23, 0xFF	; 255
    28de:	c6 01       	movw	r24, r12
    28e0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <strnlen>
    28e4:	8c 01       	movw	r16, r24
    28e6:	f9 2d       	mov	r31, r9
    28e8:	ff 77       	andi	r31, 0x7F	; 127
    28ea:	14 c0       	rjmp	.+40     	; 0x2914 <vfprintf+0x45a>
    28ec:	56 01       	movw	r10, r12
    28ee:	22 e0       	ldi	r18, 0x02	; 2
    28f0:	a2 0e       	add	r10, r18
    28f2:	b1 1c       	adc	r11, r1
    28f4:	f6 01       	movw	r30, r12
    28f6:	c0 80       	ld	r12, Z
    28f8:	d1 80       	ldd	r13, Z+1	; 0x01
    28fa:	96 fe       	sbrs	r9, 6
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <vfprintf+0x44a>
    28fe:	61 2f       	mov	r22, r17
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <vfprintf+0x44e>
    2904:	6f ef       	ldi	r22, 0xFF	; 255
    2906:	7f ef       	ldi	r23, 0xFF	; 255
    2908:	c6 01       	movw	r24, r12
    290a:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <strnlen_P>
    290e:	8c 01       	movw	r16, r24
    2910:	f9 2d       	mov	r31, r9
    2912:	f0 68       	ori	r31, 0x80	; 128
    2914:	9f 2e       	mov	r9, r31
    2916:	f3 fd       	sbrc	r31, 3
    2918:	1a c0       	rjmp	.+52     	; 0x294e <vfprintf+0x494>
    291a:	85 2d       	mov	r24, r5
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	08 17       	cp	r16, r24
    2920:	19 07       	cpc	r17, r25
    2922:	a8 f4       	brcc	.+42     	; 0x294e <vfprintf+0x494>
    2924:	b7 01       	movw	r22, r14
    2926:	80 e2       	ldi	r24, 0x20	; 32
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    292e:	5a 94       	dec	r5
    2930:	f4 cf       	rjmp	.-24     	; 0x291a <vfprintf+0x460>
    2932:	f6 01       	movw	r30, r12
    2934:	97 fc       	sbrc	r9, 7
    2936:	85 91       	lpm	r24, Z+
    2938:	97 fe       	sbrs	r9, 7
    293a:	81 91       	ld	r24, Z+
    293c:	6f 01       	movw	r12, r30
    293e:	b7 01       	movw	r22, r14
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2946:	51 10       	cpse	r5, r1
    2948:	5a 94       	dec	r5
    294a:	01 50       	subi	r16, 0x01	; 1
    294c:	11 09       	sbc	r17, r1
    294e:	01 15       	cp	r16, r1
    2950:	11 05       	cpc	r17, r1
    2952:	79 f7       	brne	.-34     	; 0x2932 <vfprintf+0x478>
    2954:	f7 c0       	rjmp	.+494    	; 0x2b44 <vfprintf+0x68a>
    2956:	84 36       	cpi	r24, 0x64	; 100
    2958:	11 f0       	breq	.+4      	; 0x295e <vfprintf+0x4a4>
    295a:	89 36       	cpi	r24, 0x69	; 105
    295c:	61 f5       	brne	.+88     	; 0x29b6 <vfprintf+0x4fc>
    295e:	56 01       	movw	r10, r12
    2960:	97 fe       	sbrs	r9, 7
    2962:	09 c0       	rjmp	.+18     	; 0x2976 <vfprintf+0x4bc>
    2964:	24 e0       	ldi	r18, 0x04	; 4
    2966:	a2 0e       	add	r10, r18
    2968:	b1 1c       	adc	r11, r1
    296a:	f6 01       	movw	r30, r12
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0a c0       	rjmp	.+20     	; 0x298a <vfprintf+0x4d0>
    2976:	f2 e0       	ldi	r31, 0x02	; 2
    2978:	af 0e       	add	r10, r31
    297a:	b1 1c       	adc	r11, r1
    297c:	f6 01       	movw	r30, r12
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	07 2e       	mov	r0, r23
    2984:	00 0c       	add	r0, r0
    2986:	88 0b       	sbc	r24, r24
    2988:	99 0b       	sbc	r25, r25
    298a:	f9 2d       	mov	r31, r9
    298c:	ff 76       	andi	r31, 0x6F	; 111
    298e:	9f 2e       	mov	r9, r31
    2990:	97 ff       	sbrs	r25, 7
    2992:	09 c0       	rjmp	.+18     	; 0x29a6 <vfprintf+0x4ec>
    2994:	90 95       	com	r25
    2996:	80 95       	com	r24
    2998:	70 95       	com	r23
    299a:	61 95       	neg	r22
    299c:	7f 4f       	sbci	r23, 0xFF	; 255
    299e:	8f 4f       	sbci	r24, 0xFF	; 255
    29a0:	9f 4f       	sbci	r25, 0xFF	; 255
    29a2:	f0 68       	ori	r31, 0x80	; 128
    29a4:	9f 2e       	mov	r9, r31
    29a6:	2a e0       	ldi	r18, 0x0A	; 10
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	a3 01       	movw	r20, r6
    29ac:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__ultoa_invert>
    29b0:	c8 2e       	mov	r12, r24
    29b2:	c6 18       	sub	r12, r6
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <vfprintf+0x57a>
    29b6:	09 2d       	mov	r16, r9
    29b8:	85 37       	cpi	r24, 0x75	; 117
    29ba:	21 f4       	brne	.+8      	; 0x29c4 <vfprintf+0x50a>
    29bc:	0f 7e       	andi	r16, 0xEF	; 239
    29be:	2a e0       	ldi	r18, 0x0A	; 10
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	1d c0       	rjmp	.+58     	; 0x29fe <vfprintf+0x544>
    29c4:	09 7f       	andi	r16, 0xF9	; 249
    29c6:	8f 36       	cpi	r24, 0x6F	; 111
    29c8:	91 f0       	breq	.+36     	; 0x29ee <vfprintf+0x534>
    29ca:	18 f4       	brcc	.+6      	; 0x29d2 <vfprintf+0x518>
    29cc:	88 35       	cpi	r24, 0x58	; 88
    29ce:	59 f0       	breq	.+22     	; 0x29e6 <vfprintf+0x52c>
    29d0:	c3 c0       	rjmp	.+390    	; 0x2b58 <vfprintf+0x69e>
    29d2:	80 37       	cpi	r24, 0x70	; 112
    29d4:	19 f0       	breq	.+6      	; 0x29dc <vfprintf+0x522>
    29d6:	88 37       	cpi	r24, 0x78	; 120
    29d8:	11 f0       	breq	.+4      	; 0x29de <vfprintf+0x524>
    29da:	be c0       	rjmp	.+380    	; 0x2b58 <vfprintf+0x69e>
    29dc:	00 61       	ori	r16, 0x10	; 16
    29de:	04 ff       	sbrs	r16, 4
    29e0:	09 c0       	rjmp	.+18     	; 0x29f4 <vfprintf+0x53a>
    29e2:	04 60       	ori	r16, 0x04	; 4
    29e4:	07 c0       	rjmp	.+14     	; 0x29f4 <vfprintf+0x53a>
    29e6:	94 fe       	sbrs	r9, 4
    29e8:	08 c0       	rjmp	.+16     	; 0x29fa <vfprintf+0x540>
    29ea:	06 60       	ori	r16, 0x06	; 6
    29ec:	06 c0       	rjmp	.+12     	; 0x29fa <vfprintf+0x540>
    29ee:	28 e0       	ldi	r18, 0x08	; 8
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	05 c0       	rjmp	.+10     	; 0x29fe <vfprintf+0x544>
    29f4:	20 e1       	ldi	r18, 0x10	; 16
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <vfprintf+0x544>
    29fa:	20 e1       	ldi	r18, 0x10	; 16
    29fc:	32 e0       	ldi	r19, 0x02	; 2
    29fe:	56 01       	movw	r10, r12
    2a00:	07 ff       	sbrs	r16, 7
    2a02:	09 c0       	rjmp	.+18     	; 0x2a16 <vfprintf+0x55c>
    2a04:	84 e0       	ldi	r24, 0x04	; 4
    2a06:	a8 0e       	add	r10, r24
    2a08:	b1 1c       	adc	r11, r1
    2a0a:	f6 01       	movw	r30, r12
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	08 c0       	rjmp	.+16     	; 0x2a26 <vfprintf+0x56c>
    2a16:	f2 e0       	ldi	r31, 0x02	; 2
    2a18:	af 0e       	add	r10, r31
    2a1a:	b1 1c       	adc	r11, r1
    2a1c:	f6 01       	movw	r30, r12
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a3 01       	movw	r20, r6
    2a28:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__ultoa_invert>
    2a2c:	c8 2e       	mov	r12, r24
    2a2e:	c6 18       	sub	r12, r6
    2a30:	0f 77       	andi	r16, 0x7F	; 127
    2a32:	90 2e       	mov	r9, r16
    2a34:	96 fe       	sbrs	r9, 6
    2a36:	0b c0       	rjmp	.+22     	; 0x2a4e <vfprintf+0x594>
    2a38:	09 2d       	mov	r16, r9
    2a3a:	0e 7f       	andi	r16, 0xFE	; 254
    2a3c:	c1 16       	cp	r12, r17
    2a3e:	50 f4       	brcc	.+20     	; 0x2a54 <vfprintf+0x59a>
    2a40:	94 fe       	sbrs	r9, 4
    2a42:	0a c0       	rjmp	.+20     	; 0x2a58 <vfprintf+0x59e>
    2a44:	92 fc       	sbrc	r9, 2
    2a46:	08 c0       	rjmp	.+16     	; 0x2a58 <vfprintf+0x59e>
    2a48:	09 2d       	mov	r16, r9
    2a4a:	0e 7e       	andi	r16, 0xEE	; 238
    2a4c:	05 c0       	rjmp	.+10     	; 0x2a58 <vfprintf+0x59e>
    2a4e:	dc 2c       	mov	r13, r12
    2a50:	09 2d       	mov	r16, r9
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <vfprintf+0x5a0>
    2a54:	dc 2c       	mov	r13, r12
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <vfprintf+0x5a0>
    2a58:	d1 2e       	mov	r13, r17
    2a5a:	04 ff       	sbrs	r16, 4
    2a5c:	0d c0       	rjmp	.+26     	; 0x2a78 <vfprintf+0x5be>
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ec 0d       	add	r30, r12
    2a62:	f1 1d       	adc	r31, r1
    2a64:	80 81       	ld	r24, Z
    2a66:	80 33       	cpi	r24, 0x30	; 48
    2a68:	11 f4       	brne	.+4      	; 0x2a6e <vfprintf+0x5b4>
    2a6a:	09 7e       	andi	r16, 0xE9	; 233
    2a6c:	09 c0       	rjmp	.+18     	; 0x2a80 <vfprintf+0x5c6>
    2a6e:	02 ff       	sbrs	r16, 2
    2a70:	06 c0       	rjmp	.+12     	; 0x2a7e <vfprintf+0x5c4>
    2a72:	d3 94       	inc	r13
    2a74:	d3 94       	inc	r13
    2a76:	04 c0       	rjmp	.+8      	; 0x2a80 <vfprintf+0x5c6>
    2a78:	80 2f       	mov	r24, r16
    2a7a:	86 78       	andi	r24, 0x86	; 134
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <vfprintf+0x5c6>
    2a7e:	d3 94       	inc	r13
    2a80:	03 fd       	sbrc	r16, 3
    2a82:	11 c0       	rjmp	.+34     	; 0x2aa6 <vfprintf+0x5ec>
    2a84:	00 ff       	sbrs	r16, 0
    2a86:	06 c0       	rjmp	.+12     	; 0x2a94 <vfprintf+0x5da>
    2a88:	1c 2d       	mov	r17, r12
    2a8a:	d5 14       	cp	r13, r5
    2a8c:	80 f4       	brcc	.+32     	; 0x2aae <vfprintf+0x5f4>
    2a8e:	15 0d       	add	r17, r5
    2a90:	1d 19       	sub	r17, r13
    2a92:	0d c0       	rjmp	.+26     	; 0x2aae <vfprintf+0x5f4>
    2a94:	d5 14       	cp	r13, r5
    2a96:	58 f4       	brcc	.+22     	; 0x2aae <vfprintf+0x5f4>
    2a98:	b7 01       	movw	r22, r14
    2a9a:	80 e2       	ldi	r24, 0x20	; 32
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2aa2:	d3 94       	inc	r13
    2aa4:	f7 cf       	rjmp	.-18     	; 0x2a94 <vfprintf+0x5da>
    2aa6:	d5 14       	cp	r13, r5
    2aa8:	10 f4       	brcc	.+4      	; 0x2aae <vfprintf+0x5f4>
    2aaa:	5d 18       	sub	r5, r13
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <vfprintf+0x5f6>
    2aae:	51 2c       	mov	r5, r1
    2ab0:	04 ff       	sbrs	r16, 4
    2ab2:	10 c0       	rjmp	.+32     	; 0x2ad4 <vfprintf+0x61a>
    2ab4:	b7 01       	movw	r22, r14
    2ab6:	80 e3       	ldi	r24, 0x30	; 48
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2abe:	02 ff       	sbrs	r16, 2
    2ac0:	17 c0       	rjmp	.+46     	; 0x2af0 <vfprintf+0x636>
    2ac2:	01 fd       	sbrc	r16, 1
    2ac4:	03 c0       	rjmp	.+6      	; 0x2acc <vfprintf+0x612>
    2ac6:	88 e7       	ldi	r24, 0x78	; 120
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <vfprintf+0x616>
    2acc:	88 e5       	ldi	r24, 0x58	; 88
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	b7 01       	movw	r22, r14
    2ad2:	0c c0       	rjmp	.+24     	; 0x2aec <vfprintf+0x632>
    2ad4:	80 2f       	mov	r24, r16
    2ad6:	86 78       	andi	r24, 0x86	; 134
    2ad8:	59 f0       	breq	.+22     	; 0x2af0 <vfprintf+0x636>
    2ada:	01 ff       	sbrs	r16, 1
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <vfprintf+0x628>
    2ade:	8b e2       	ldi	r24, 0x2B	; 43
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <vfprintf+0x62a>
    2ae2:	80 e2       	ldi	r24, 0x20	; 32
    2ae4:	07 fd       	sbrc	r16, 7
    2ae6:	8d e2       	ldi	r24, 0x2D	; 45
    2ae8:	b7 01       	movw	r22, r14
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2af0:	c1 16       	cp	r12, r17
    2af2:	38 f4       	brcc	.+14     	; 0x2b02 <vfprintf+0x648>
    2af4:	b7 01       	movw	r22, r14
    2af6:	80 e3       	ldi	r24, 0x30	; 48
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2afe:	11 50       	subi	r17, 0x01	; 1
    2b00:	f7 cf       	rjmp	.-18     	; 0x2af0 <vfprintf+0x636>
    2b02:	ca 94       	dec	r12
    2b04:	f3 01       	movw	r30, r6
    2b06:	ec 0d       	add	r30, r12
    2b08:	f1 1d       	adc	r31, r1
    2b0a:	80 81       	ld	r24, Z
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2b14:	c1 10       	cpse	r12, r1
    2b16:	f5 cf       	rjmp	.-22     	; 0x2b02 <vfprintf+0x648>
    2b18:	15 c0       	rjmp	.+42     	; 0x2b44 <vfprintf+0x68a>
    2b1a:	f4 e0       	ldi	r31, 0x04	; 4
    2b1c:	f5 15       	cp	r31, r5
    2b1e:	60 f5       	brcc	.+88     	; 0x2b78 <vfprintf+0x6be>
    2b20:	84 e0       	ldi	r24, 0x04	; 4
    2b22:	58 1a       	sub	r5, r24
    2b24:	93 fe       	sbrs	r9, 3
    2b26:	1f c0       	rjmp	.+62     	; 0x2b66 <vfprintf+0x6ac>
    2b28:	01 11       	cpse	r16, r1
    2b2a:	27 c0       	rjmp	.+78     	; 0x2b7a <vfprintf+0x6c0>
    2b2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b2e:	23 ff       	sbrs	r18, 3
    2b30:	2a c0       	rjmp	.+84     	; 0x2b86 <vfprintf+0x6cc>
    2b32:	08 e6       	ldi	r16, 0x68	; 104
    2b34:	10 e0       	ldi	r17, 0x00	; 0
    2b36:	39 2d       	mov	r19, r9
    2b38:	30 71       	andi	r19, 0x10	; 16
    2b3a:	93 2e       	mov	r9, r19
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	84 91       	lpm	r24, Z
    2b40:	81 11       	cpse	r24, r1
    2b42:	24 c0       	rjmp	.+72     	; 0x2b8c <vfprintf+0x6d2>
    2b44:	55 20       	and	r5, r5
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <vfprintf+0x690>
    2b48:	e4 cc       	rjmp	.-1592   	; 0x2512 <vfprintf+0x58>
    2b4a:	b7 01       	movw	r22, r14
    2b4c:	80 e2       	ldi	r24, 0x20	; 32
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2b54:	5a 94       	dec	r5
    2b56:	f6 cf       	rjmp	.-20     	; 0x2b44 <vfprintf+0x68a>
    2b58:	f7 01       	movw	r30, r14
    2b5a:	86 81       	ldd	r24, Z+6	; 0x06
    2b5c:	97 81       	ldd	r25, Z+7	; 0x07
    2b5e:	26 c0       	rjmp	.+76     	; 0x2bac <vfprintf+0x6f2>
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	9f ef       	ldi	r25, 0xFF	; 255
    2b64:	23 c0       	rjmp	.+70     	; 0x2bac <vfprintf+0x6f2>
    2b66:	b7 01       	movw	r22, r14
    2b68:	80 e2       	ldi	r24, 0x20	; 32
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2b70:	5a 94       	dec	r5
    2b72:	51 10       	cpse	r5, r1
    2b74:	f8 cf       	rjmp	.-16     	; 0x2b66 <vfprintf+0x6ac>
    2b76:	d8 cf       	rjmp	.-80     	; 0x2b28 <vfprintf+0x66e>
    2b78:	51 2c       	mov	r5, r1
    2b7a:	b7 01       	movw	r22, r14
    2b7c:	80 2f       	mov	r24, r16
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2b84:	d3 cf       	rjmp	.-90     	; 0x2b2c <vfprintf+0x672>
    2b86:	0c e6       	ldi	r16, 0x6C	; 108
    2b88:	10 e0       	ldi	r17, 0x00	; 0
    2b8a:	d5 cf       	rjmp	.-86     	; 0x2b36 <vfprintf+0x67c>
    2b8c:	91 10       	cpse	r9, r1
    2b8e:	80 52       	subi	r24, 0x20	; 32
    2b90:	b7 01       	movw	r22, r14
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <fputc>
    2b98:	0f 5f       	subi	r16, 0xFF	; 255
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	cf cf       	rjmp	.-98     	; 0x2b3c <vfprintf+0x682>
    2b9e:	23 e0       	ldi	r18, 0x03	; 3
    2ba0:	25 15       	cp	r18, r5
    2ba2:	10 f4       	brcc	.+4      	; 0x2ba8 <vfprintf+0x6ee>
    2ba4:	83 e0       	ldi	r24, 0x03	; 3
    2ba6:	bd cf       	rjmp	.-134    	; 0x2b22 <vfprintf+0x668>
    2ba8:	51 2c       	mov	r5, r1
    2baa:	c0 cf       	rjmp	.-128    	; 0x2b2c <vfprintf+0x672>
    2bac:	60 96       	adiw	r28, 0x10	; 16
    2bae:	e2 e1       	ldi	r30, 0x12	; 18
    2bb0:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__>

00002bb4 <__prologue_saves__>:
    2bb4:	2f 92       	push	r2
    2bb6:	3f 92       	push	r3
    2bb8:	4f 92       	push	r4
    2bba:	5f 92       	push	r5
    2bbc:	6f 92       	push	r6
    2bbe:	7f 92       	push	r7
    2bc0:	8f 92       	push	r8
    2bc2:	9f 92       	push	r9
    2bc4:	af 92       	push	r10
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	ca 1b       	sub	r28, r26
    2bde:	db 0b       	sbc	r29, r27
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	09 94       	ijmp

00002bec <__epilogue_restores__>:
    2bec:	2a 88       	ldd	r2, Y+18	; 0x12
    2bee:	39 88       	ldd	r3, Y+17	; 0x11
    2bf0:	48 88       	ldd	r4, Y+16	; 0x10
    2bf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bfe:	b9 84       	ldd	r11, Y+9	; 0x09
    2c00:	c8 84       	ldd	r12, Y+8	; 0x08
    2c02:	df 80       	ldd	r13, Y+7	; 0x07
    2c04:	ee 80       	ldd	r14, Y+6	; 0x06
    2c06:	fd 80       	ldd	r15, Y+5	; 0x05
    2c08:	0c 81       	ldd	r16, Y+4	; 0x04
    2c0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c10:	ce 0f       	add	r28, r30
    2c12:	d1 1d       	adc	r29, r1
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	ed 01       	movw	r28, r26
    2c20:	08 95       	ret

00002c22 <__ftoa_engine>:
    2c22:	28 30       	cpi	r18, 0x08	; 8
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <__ftoa_engine+0x6>
    2c26:	27 e0       	ldi	r18, 0x07	; 7
    2c28:	33 27       	eor	r19, r19
    2c2a:	da 01       	movw	r26, r20
    2c2c:	99 0f       	add	r25, r25
    2c2e:	31 1d       	adc	r19, r1
    2c30:	87 fd       	sbrc	r24, 7
    2c32:	91 60       	ori	r25, 0x01	; 1
    2c34:	00 96       	adiw	r24, 0x00	; 0
    2c36:	61 05       	cpc	r22, r1
    2c38:	71 05       	cpc	r23, r1
    2c3a:	39 f4       	brne	.+14     	; 0x2c4a <__ftoa_engine+0x28>
    2c3c:	32 60       	ori	r19, 0x02	; 2
    2c3e:	2e 5f       	subi	r18, 0xFE	; 254
    2c40:	3d 93       	st	X+, r19
    2c42:	30 e3       	ldi	r19, 0x30	; 48
    2c44:	2a 95       	dec	r18
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <__ftoa_engine+0x1e>
    2c48:	08 95       	ret
    2c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c4c:	30 f0       	brcs	.+12     	; 0x2c5a <__ftoa_engine+0x38>
    2c4e:	80 38       	cpi	r24, 0x80	; 128
    2c50:	71 05       	cpc	r23, r1
    2c52:	61 05       	cpc	r22, r1
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <__ftoa_engine+0x36>
    2c56:	3c 5f       	subi	r19, 0xFC	; 252
    2c58:	3c 5f       	subi	r19, 0xFC	; 252
    2c5a:	3d 93       	st	X+, r19
    2c5c:	91 30       	cpi	r25, 0x01	; 1
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <__ftoa_engine+0x40>
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	91 1d       	adc	r25, r1
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	1f 93       	push	r17
    2c6a:	0f 93       	push	r16
    2c6c:	ff 92       	push	r15
    2c6e:	ef 92       	push	r14
    2c70:	19 2f       	mov	r17, r25
    2c72:	98 7f       	andi	r25, 0xF8	; 248
    2c74:	96 95       	lsr	r25
    2c76:	e9 2f       	mov	r30, r25
    2c78:	96 95       	lsr	r25
    2c7a:	96 95       	lsr	r25
    2c7c:	e9 0f       	add	r30, r25
    2c7e:	ff 27       	eor	r31, r31
    2c80:	e6 53       	subi	r30, 0x36	; 54
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	99 27       	eor	r25, r25
    2c86:	33 27       	eor	r19, r19
    2c88:	ee 24       	eor	r14, r14
    2c8a:	ff 24       	eor	r15, r15
    2c8c:	a7 01       	movw	r20, r14
    2c8e:	e7 01       	movw	r28, r14
    2c90:	05 90       	lpm	r0, Z+
    2c92:	08 94       	sec
    2c94:	07 94       	ror	r0
    2c96:	28 f4       	brcc	.+10     	; 0x2ca2 <__ftoa_engine+0x80>
    2c98:	36 0f       	add	r19, r22
    2c9a:	e7 1e       	adc	r14, r23
    2c9c:	f8 1e       	adc	r15, r24
    2c9e:	49 1f       	adc	r20, r25
    2ca0:	51 1d       	adc	r21, r1
    2ca2:	66 0f       	add	r22, r22
    2ca4:	77 1f       	adc	r23, r23
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	06 94       	lsr	r0
    2cac:	a1 f7       	brne	.-24     	; 0x2c96 <__ftoa_engine+0x74>
    2cae:	05 90       	lpm	r0, Z+
    2cb0:	07 94       	ror	r0
    2cb2:	28 f4       	brcc	.+10     	; 0x2cbe <__ftoa_engine+0x9c>
    2cb4:	e7 0e       	add	r14, r23
    2cb6:	f8 1e       	adc	r15, r24
    2cb8:	49 1f       	adc	r20, r25
    2cba:	56 1f       	adc	r21, r22
    2cbc:	c1 1d       	adc	r28, r1
    2cbe:	77 0f       	add	r23, r23
    2cc0:	88 1f       	adc	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	66 1f       	adc	r22, r22
    2cc6:	06 94       	lsr	r0
    2cc8:	a1 f7       	brne	.-24     	; 0x2cb2 <__ftoa_engine+0x90>
    2cca:	05 90       	lpm	r0, Z+
    2ccc:	07 94       	ror	r0
    2cce:	28 f4       	brcc	.+10     	; 0x2cda <__ftoa_engine+0xb8>
    2cd0:	f8 0e       	add	r15, r24
    2cd2:	49 1f       	adc	r20, r25
    2cd4:	56 1f       	adc	r21, r22
    2cd6:	c7 1f       	adc	r28, r23
    2cd8:	d1 1d       	adc	r29, r1
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	66 1f       	adc	r22, r22
    2ce0:	77 1f       	adc	r23, r23
    2ce2:	06 94       	lsr	r0
    2ce4:	a1 f7       	brne	.-24     	; 0x2cce <__ftoa_engine+0xac>
    2ce6:	05 90       	lpm	r0, Z+
    2ce8:	07 94       	ror	r0
    2cea:	20 f4       	brcc	.+8      	; 0x2cf4 <__ftoa_engine+0xd2>
    2cec:	49 0f       	add	r20, r25
    2cee:	56 1f       	adc	r21, r22
    2cf0:	c7 1f       	adc	r28, r23
    2cf2:	d8 1f       	adc	r29, r24
    2cf4:	99 0f       	add	r25, r25
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	06 94       	lsr	r0
    2cfe:	a9 f7       	brne	.-22     	; 0x2cea <__ftoa_engine+0xc8>
    2d00:	84 91       	lpm	r24, Z
    2d02:	10 95       	com	r17
    2d04:	17 70       	andi	r17, 0x07	; 7
    2d06:	41 f0       	breq	.+16     	; 0x2d18 <__ftoa_engine+0xf6>
    2d08:	d6 95       	lsr	r29
    2d0a:	c7 95       	ror	r28
    2d0c:	57 95       	ror	r21
    2d0e:	47 95       	ror	r20
    2d10:	f7 94       	ror	r15
    2d12:	e7 94       	ror	r14
    2d14:	1a 95       	dec	r17
    2d16:	c1 f7       	brne	.-16     	; 0x2d08 <__ftoa_engine+0xe6>
    2d18:	e0 e7       	ldi	r30, 0x70	; 112
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	68 94       	set
    2d1e:	15 90       	lpm	r1, Z+
    2d20:	15 91       	lpm	r17, Z+
    2d22:	35 91       	lpm	r19, Z+
    2d24:	65 91       	lpm	r22, Z+
    2d26:	95 91       	lpm	r25, Z+
    2d28:	05 90       	lpm	r0, Z+
    2d2a:	7f e2       	ldi	r23, 0x2F	; 47
    2d2c:	73 95       	inc	r23
    2d2e:	e1 18       	sub	r14, r1
    2d30:	f1 0a       	sbc	r15, r17
    2d32:	43 0b       	sbc	r20, r19
    2d34:	56 0b       	sbc	r21, r22
    2d36:	c9 0b       	sbc	r28, r25
    2d38:	d0 09       	sbc	r29, r0
    2d3a:	c0 f7       	brcc	.-16     	; 0x2d2c <__ftoa_engine+0x10a>
    2d3c:	e1 0c       	add	r14, r1
    2d3e:	f1 1e       	adc	r15, r17
    2d40:	43 1f       	adc	r20, r19
    2d42:	56 1f       	adc	r21, r22
    2d44:	c9 1f       	adc	r28, r25
    2d46:	d0 1d       	adc	r29, r0
    2d48:	7e f4       	brtc	.+30     	; 0x2d68 <__ftoa_engine+0x146>
    2d4a:	70 33       	cpi	r23, 0x30	; 48
    2d4c:	11 f4       	brne	.+4      	; 0x2d52 <__ftoa_engine+0x130>
    2d4e:	8a 95       	dec	r24
    2d50:	e6 cf       	rjmp	.-52     	; 0x2d1e <__ftoa_engine+0xfc>
    2d52:	e8 94       	clt
    2d54:	01 50       	subi	r16, 0x01	; 1
    2d56:	30 f0       	brcs	.+12     	; 0x2d64 <__ftoa_engine+0x142>
    2d58:	08 0f       	add	r16, r24
    2d5a:	0a f4       	brpl	.+2      	; 0x2d5e <__ftoa_engine+0x13c>
    2d5c:	00 27       	eor	r16, r16
    2d5e:	02 17       	cp	r16, r18
    2d60:	08 f4       	brcc	.+2      	; 0x2d64 <__ftoa_engine+0x142>
    2d62:	20 2f       	mov	r18, r16
    2d64:	23 95       	inc	r18
    2d66:	02 2f       	mov	r16, r18
    2d68:	7a 33       	cpi	r23, 0x3A	; 58
    2d6a:	28 f0       	brcs	.+10     	; 0x2d76 <__ftoa_engine+0x154>
    2d6c:	79 e3       	ldi	r23, 0x39	; 57
    2d6e:	7d 93       	st	X+, r23
    2d70:	2a 95       	dec	r18
    2d72:	e9 f7       	brne	.-6      	; 0x2d6e <__ftoa_engine+0x14c>
    2d74:	10 c0       	rjmp	.+32     	; 0x2d96 <__ftoa_engine+0x174>
    2d76:	7d 93       	st	X+, r23
    2d78:	2a 95       	dec	r18
    2d7a:	89 f6       	brne	.-94     	; 0x2d1e <__ftoa_engine+0xfc>
    2d7c:	06 94       	lsr	r0
    2d7e:	97 95       	ror	r25
    2d80:	67 95       	ror	r22
    2d82:	37 95       	ror	r19
    2d84:	17 95       	ror	r17
    2d86:	17 94       	ror	r1
    2d88:	e1 18       	sub	r14, r1
    2d8a:	f1 0a       	sbc	r15, r17
    2d8c:	43 0b       	sbc	r20, r19
    2d8e:	56 0b       	sbc	r21, r22
    2d90:	c9 0b       	sbc	r28, r25
    2d92:	d0 09       	sbc	r29, r0
    2d94:	98 f0       	brcs	.+38     	; 0x2dbc <__ftoa_engine+0x19a>
    2d96:	23 95       	inc	r18
    2d98:	7e 91       	ld	r23, -X
    2d9a:	73 95       	inc	r23
    2d9c:	7a 33       	cpi	r23, 0x3A	; 58
    2d9e:	08 f0       	brcs	.+2      	; 0x2da2 <__ftoa_engine+0x180>
    2da0:	70 e3       	ldi	r23, 0x30	; 48
    2da2:	7c 93       	st	X, r23
    2da4:	20 13       	cpse	r18, r16
    2da6:	b8 f7       	brcc	.-18     	; 0x2d96 <__ftoa_engine+0x174>
    2da8:	7e 91       	ld	r23, -X
    2daa:	70 61       	ori	r23, 0x10	; 16
    2dac:	7d 93       	st	X+, r23
    2dae:	30 f0       	brcs	.+12     	; 0x2dbc <__ftoa_engine+0x19a>
    2db0:	83 95       	inc	r24
    2db2:	71 e3       	ldi	r23, 0x31	; 49
    2db4:	7d 93       	st	X+, r23
    2db6:	70 e3       	ldi	r23, 0x30	; 48
    2db8:	2a 95       	dec	r18
    2dba:	e1 f7       	brne	.-8      	; 0x2db4 <__ftoa_engine+0x192>
    2dbc:	11 24       	eor	r1, r1
    2dbe:	ef 90       	pop	r14
    2dc0:	ff 90       	pop	r15
    2dc2:	0f 91       	pop	r16
    2dc4:	1f 91       	pop	r17
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	99 27       	eor	r25, r25
    2dcc:	87 fd       	sbrc	r24, 7
    2dce:	90 95       	com	r25
    2dd0:	08 95       	ret

00002dd2 <strnlen_P>:
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	05 90       	lpm	r0, Z+
    2dd6:	61 50       	subi	r22, 0x01	; 1
    2dd8:	70 40       	sbci	r23, 0x00	; 0
    2dda:	01 10       	cpse	r0, r1
    2ddc:	d8 f7       	brcc	.-10     	; 0x2dd4 <strnlen_P+0x2>
    2dde:	80 95       	com	r24
    2de0:	90 95       	com	r25
    2de2:	8e 0f       	add	r24, r30
    2de4:	9f 1f       	adc	r25, r31
    2de6:	08 95       	ret

00002de8 <strnlen>:
    2de8:	fc 01       	movw	r30, r24
    2dea:	61 50       	subi	r22, 0x01	; 1
    2dec:	70 40       	sbci	r23, 0x00	; 0
    2dee:	01 90       	ld	r0, Z+
    2df0:	01 10       	cpse	r0, r1
    2df2:	d8 f7       	brcc	.-10     	; 0x2dea <strnlen+0x2>
    2df4:	80 95       	com	r24
    2df6:	90 95       	com	r25
    2df8:	8e 0f       	add	r24, r30
    2dfa:	9f 1f       	adc	r25, r31
    2dfc:	08 95       	ret

00002dfe <fputc>:
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	fb 01       	movw	r30, r22
    2e08:	23 81       	ldd	r18, Z+3	; 0x03
    2e0a:	21 fd       	sbrc	r18, 1
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <fputc+0x16>
    2e0e:	8f ef       	ldi	r24, 0xFF	; 255
    2e10:	9f ef       	ldi	r25, 0xFF	; 255
    2e12:	2c c0       	rjmp	.+88     	; 0x2e6c <fputc+0x6e>
    2e14:	22 ff       	sbrs	r18, 2
    2e16:	16 c0       	rjmp	.+44     	; 0x2e44 <fputc+0x46>
    2e18:	46 81       	ldd	r20, Z+6	; 0x06
    2e1a:	57 81       	ldd	r21, Z+7	; 0x07
    2e1c:	24 81       	ldd	r18, Z+4	; 0x04
    2e1e:	35 81       	ldd	r19, Z+5	; 0x05
    2e20:	42 17       	cp	r20, r18
    2e22:	53 07       	cpc	r21, r19
    2e24:	44 f4       	brge	.+16     	; 0x2e36 <fputc+0x38>
    2e26:	a0 81       	ld	r26, Z
    2e28:	b1 81       	ldd	r27, Z+1	; 0x01
    2e2a:	9d 01       	movw	r18, r26
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	31 83       	std	Z+1, r19	; 0x01
    2e32:	20 83       	st	Z, r18
    2e34:	8c 93       	st	X, r24
    2e36:	26 81       	ldd	r18, Z+6	; 0x06
    2e38:	37 81       	ldd	r19, Z+7	; 0x07
    2e3a:	2f 5f       	subi	r18, 0xFF	; 255
    2e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3e:	37 83       	std	Z+7, r19	; 0x07
    2e40:	26 83       	std	Z+6, r18	; 0x06
    2e42:	14 c0       	rjmp	.+40     	; 0x2e6c <fputc+0x6e>
    2e44:	8b 01       	movw	r16, r22
    2e46:	ec 01       	movw	r28, r24
    2e48:	fb 01       	movw	r30, r22
    2e4a:	00 84       	ldd	r0, Z+8	; 0x08
    2e4c:	f1 85       	ldd	r31, Z+9	; 0x09
    2e4e:	e0 2d       	mov	r30, r0
    2e50:	09 95       	icall
    2e52:	89 2b       	or	r24, r25
    2e54:	e1 f6       	brne	.-72     	; 0x2e0e <fputc+0x10>
    2e56:	d8 01       	movw	r26, r16
    2e58:	16 96       	adiw	r26, 0x06	; 6
    2e5a:	8d 91       	ld	r24, X+
    2e5c:	9c 91       	ld	r25, X
    2e5e:	17 97       	sbiw	r26, 0x07	; 7
    2e60:	01 96       	adiw	r24, 0x01	; 1
    2e62:	17 96       	adiw	r26, 0x07	; 7
    2e64:	9c 93       	st	X, r25
    2e66:	8e 93       	st	-X, r24
    2e68:	16 97       	sbiw	r26, 0x06	; 6
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <sprintf_P>:
    2e76:	ae e0       	ldi	r26, 0x0E	; 14
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e1 e4       	ldi	r30, 0x41	; 65
    2e7c:	f7 e1       	ldi	r31, 0x17	; 23
    2e7e:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__prologue_saves__+0x1c>
    2e82:	0d 89       	ldd	r16, Y+21	; 0x15
    2e84:	1e 89       	ldd	r17, Y+22	; 0x16
    2e86:	8e e0       	ldi	r24, 0x0E	; 14
    2e88:	8c 83       	std	Y+4, r24	; 0x04
    2e8a:	1a 83       	std	Y+2, r17	; 0x02
    2e8c:	09 83       	std	Y+1, r16	; 0x01
    2e8e:	8f ef       	ldi	r24, 0xFF	; 255
    2e90:	9f e7       	ldi	r25, 0x7F	; 127
    2e92:	9e 83       	std	Y+6, r25	; 0x06
    2e94:	8d 83       	std	Y+5, r24	; 0x05
    2e96:	ae 01       	movw	r20, r28
    2e98:	47 5e       	subi	r20, 0xE7	; 231
    2e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9c:	6f 89       	ldd	r22, Y+23	; 0x17
    2e9e:	78 8d       	ldd	r23, Y+24	; 0x18
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	01 96       	adiw	r24, 0x01	; 1
    2ea4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vfprintf>
    2ea8:	ef 81       	ldd	r30, Y+7	; 0x07
    2eaa:	f8 85       	ldd	r31, Y+8	; 0x08
    2eac:	e0 0f       	add	r30, r16
    2eae:	f1 1f       	adc	r31, r17
    2eb0:	10 82       	st	Z, r1
    2eb2:	2e 96       	adiw	r28, 0x0e	; 14
    2eb4:	e4 e0       	ldi	r30, 0x04	; 4
    2eb6:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__epilogue_restores__+0x1c>

00002eba <__ultoa_invert>:
    2eba:	fa 01       	movw	r30, r20
    2ebc:	aa 27       	eor	r26, r26
    2ebe:	28 30       	cpi	r18, 0x08	; 8
    2ec0:	51 f1       	breq	.+84     	; 0x2f16 <__ultoa_invert+0x5c>
    2ec2:	20 31       	cpi	r18, 0x10	; 16
    2ec4:	81 f1       	breq	.+96     	; 0x2f26 <__ultoa_invert+0x6c>
    2ec6:	e8 94       	clt
    2ec8:	6f 93       	push	r22
    2eca:	6e 7f       	andi	r22, 0xFE	; 254
    2ecc:	6e 5f       	subi	r22, 0xFE	; 254
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed4:	af 4f       	sbci	r26, 0xFF	; 255
    2ed6:	b1 e0       	ldi	r27, 0x01	; 1
    2ed8:	3e d0       	rcall	.+124    	; 0x2f56 <__ultoa_invert+0x9c>
    2eda:	b4 e0       	ldi	r27, 0x04	; 4
    2edc:	3c d0       	rcall	.+120    	; 0x2f56 <__ultoa_invert+0x9c>
    2ede:	67 0f       	add	r22, r23
    2ee0:	78 1f       	adc	r23, r24
    2ee2:	89 1f       	adc	r24, r25
    2ee4:	9a 1f       	adc	r25, r26
    2ee6:	a1 1d       	adc	r26, r1
    2ee8:	68 0f       	add	r22, r24
    2eea:	79 1f       	adc	r23, r25
    2eec:	8a 1f       	adc	r24, r26
    2eee:	91 1d       	adc	r25, r1
    2ef0:	a1 1d       	adc	r26, r1
    2ef2:	6a 0f       	add	r22, r26
    2ef4:	71 1d       	adc	r23, r1
    2ef6:	81 1d       	adc	r24, r1
    2ef8:	91 1d       	adc	r25, r1
    2efa:	a1 1d       	adc	r26, r1
    2efc:	20 d0       	rcall	.+64     	; 0x2f3e <__ultoa_invert+0x84>
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <__ultoa_invert+0x48>
    2f00:	68 94       	set
    2f02:	3f 91       	pop	r19
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	26 9f       	mul	r18, r22
    2f08:	11 24       	eor	r1, r1
    2f0a:	30 19       	sub	r19, r0
    2f0c:	30 5d       	subi	r19, 0xD0	; 208
    2f0e:	31 93       	st	Z+, r19
    2f10:	de f6       	brtc	.-74     	; 0x2ec8 <__ultoa_invert+0xe>
    2f12:	cf 01       	movw	r24, r30
    2f14:	08 95       	ret
    2f16:	46 2f       	mov	r20, r22
    2f18:	47 70       	andi	r20, 0x07	; 7
    2f1a:	40 5d       	subi	r20, 0xD0	; 208
    2f1c:	41 93       	st	Z+, r20
    2f1e:	b3 e0       	ldi	r27, 0x03	; 3
    2f20:	0f d0       	rcall	.+30     	; 0x2f40 <__ultoa_invert+0x86>
    2f22:	c9 f7       	brne	.-14     	; 0x2f16 <__ultoa_invert+0x5c>
    2f24:	f6 cf       	rjmp	.-20     	; 0x2f12 <__ultoa_invert+0x58>
    2f26:	46 2f       	mov	r20, r22
    2f28:	4f 70       	andi	r20, 0x0F	; 15
    2f2a:	40 5d       	subi	r20, 0xD0	; 208
    2f2c:	4a 33       	cpi	r20, 0x3A	; 58
    2f2e:	18 f0       	brcs	.+6      	; 0x2f36 <__ultoa_invert+0x7c>
    2f30:	49 5d       	subi	r20, 0xD9	; 217
    2f32:	31 fd       	sbrc	r19, 1
    2f34:	40 52       	subi	r20, 0x20	; 32
    2f36:	41 93       	st	Z+, r20
    2f38:	02 d0       	rcall	.+4      	; 0x2f3e <__ultoa_invert+0x84>
    2f3a:	a9 f7       	brne	.-22     	; 0x2f26 <__ultoa_invert+0x6c>
    2f3c:	ea cf       	rjmp	.-44     	; 0x2f12 <__ultoa_invert+0x58>
    2f3e:	b4 e0       	ldi	r27, 0x04	; 4
    2f40:	a6 95       	lsr	r26
    2f42:	97 95       	ror	r25
    2f44:	87 95       	ror	r24
    2f46:	77 95       	ror	r23
    2f48:	67 95       	ror	r22
    2f4a:	ba 95       	dec	r27
    2f4c:	c9 f7       	brne	.-14     	; 0x2f40 <__ultoa_invert+0x86>
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	61 05       	cpc	r22, r1
    2f52:	71 05       	cpc	r23, r1
    2f54:	08 95       	ret
    2f56:	9b 01       	movw	r18, r22
    2f58:	ac 01       	movw	r20, r24
    2f5a:	0a 2e       	mov	r0, r26
    2f5c:	06 94       	lsr	r0
    2f5e:	57 95       	ror	r21
    2f60:	47 95       	ror	r20
    2f62:	37 95       	ror	r19
    2f64:	27 95       	ror	r18
    2f66:	ba 95       	dec	r27
    2f68:	c9 f7       	brne	.-14     	; 0x2f5c <__ultoa_invert+0xa2>
    2f6a:	62 0f       	add	r22, r18
    2f6c:	73 1f       	adc	r23, r19
    2f6e:	84 1f       	adc	r24, r20
    2f70:	95 1f       	adc	r25, r21
    2f72:	a0 1d       	adc	r26, r0
    2f74:	08 95       	ret

00002f76 <_exit>:
    2f76:	f8 94       	cli

00002f78 <__stop_program>:
    2f78:	ff cf       	rjmp	.-2      	; 0x2f78 <__stop_program>
